%YAML 1.1
--- 
StructureVersion: "1.0"
Properties: 
  RUID: 147061804_2089375573
  Name: "CN.Confiscat.Переоценка. Процедуры"
  Caption: "CN.Confiscat.Переоценка. Процедуры"
  Version: "1.0.0.16"
  Optional: False
  Internal: True
  MD5: F9AFF85827D19F588828A936894F8776
Objects: 
  - 
    Properties: 
      Class: "TgdcStoredProc"
      RUID: 147313040_2105083175
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      PROCEDURENAME: "USR$CN_P_REMAINSONDATE"
      EDITIONDATE: 2023-06-07T13:32:58+02:00
      PROCEDURESOURCE: | 
        CREATE OR ALTER PROCEDURE USR$CN_P_REMAINSONDATE (
            GOODKEY INTEGER,
            REMAINSDATE DATE,
            ACTVALIATION INTEGER,
            COMPANYKEY INTEGER)
        RETURNS ( 
            REMAINS NUMERIC(15, 4))
         AS
        DECLARE VARIABLE CARDKEY INTEGER;
        DECLARE VARIABLE LB INTEGER;
        DECLARE VARIABLE RB INTEGER;
        BEGIN
         REMAINS = 0;
         SELECT LB, RB FROM gd_contact WHERE ID = :CompanyKey
         INTO :LB, RB;
        
            SELECT
              MIN ( M.CARDKEY ) AS ID,
              SUM ( M.BALANCE ) AS REMAINS
            FROM
              ( SELECT
                M.CARDKEY,
                M.CONTACTKEY,
                M.BALANCE
              FROM
                INV_BALANCE M
                JOIN GD_CONTACT CON ON M.CONTACTKEY  =  CON.ID AND  CON.LB >= :LB AND CON.RB <= :RB
              WHERE
                M.BALANCE  <>  0
            UNION ALL
            SELECT
                M.CARDKEY,
                M.CONTACTKEY,
                SUM ( M.CREDIT - M.DEBIT ) AS BALANCE
              FROM
                INV_MOVEMENT M
                JOIN GD_CONTACT CON ON M.CONTACTKEY = CON.ID AND CON.LB >= :LB AND CON.RB <= :RB
              WHERE
                M.DISABLED  =  0
                AND M.MOVEMENTDATE  >  :REMAINSDATE
                AND M.GOODKEY = :GOODKEY
            GROUP BY
              1, 2 ) M
                LEFT JOIN INV_CARD C ON C.ID  =  M.CARDKEY
        
            WHERE
              M.BALANCE  <>  0
              AND c.GOODKEY = :GOODKEY
              AND C.USR$CN_ACTVALUATION = :ACTVALIATION
            HAVING
              SUM ( M.BALANCE )  >  0
            INTO :CARDKEY, :REMAINS;
        
            SUSPEND;
        END
      RDB$DESCRIPTION: | 
        Показывыает остаток по товару на дату по всей компании.
        вх. пар-ры:
        GOODKEY INTEGER,
        REMAINSDATE DATE,
        ACTVALIATION INTEGER,
        COMPANYKEY INTEGER
  - 
    Properties: 
      Class: "TgdcStoredProc"
      RUID: 147313005_2105083175
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      PROCEDURENAME: "USR$CN_P_MOVEGOODBYCOMPANY"
      EDITIONDATE: 2023-06-07T13:32:58+02:00
      PROCEDURESOURCE: | 
        CREATE OR ALTER PROCEDURE USR$CN_P_MOVEGOODBYCOMPANY (
            GOODKEY INTEGER,
            ACTVALUATION INTEGER,
            ACOMPANYKEY INTEGER,
            DATEBEGIN DATE,
            DATEEND DATE)
        RETURNS ( 
            DEBIT NUMERIC(15, 4),
            CREDIT NUMERIC(15, 4))
         AS
        DECLARE VARIABLE LB INTEGER;
        DECLARE VARIABLE RB INTEGER;
        BEGIN
          SELECT LB, RB FROM gd_contact WHERE ID = :ACompanyKey
          INTO :LB, RB;
        
            select
            SUM(debit),
            SUM(credit)
            FROM
            (select
              m.goodkey,
              SUM(m.credit) as debit,
              0 as credit
              from inv_movement m
                left join inv_movement m1 ON m.movementkey = m1.movementkey and m.documentkey = m1.documentkey and m.id <> m1.id
                left join gd_contact com ON m.CONTACTKEY = com.id
                left join gd_contact dep ON m1.contactkey = dep.id
                left join inv_card c ON m1.cardkey = c.id
            where
              m.credit > 0 and (com.LB > :lb and com.RB > :rb) and
              dep.LB >= :lb and dep.rb <= :rb
              AND  (m.MOVEMENTDATE >= :DATEBEGIN AND m.MOVEMENTDATE <= :DATEEND)
              AND c.GOODKEY =:GOODKEY
              AND c.USR$CN_ACTVALUATION = :ACTVALUATION
              group by 1, 3
            union all
              select
              m.goodkey,
              0 as debit,
              SUM(m.debit) as credit
              from inv_movement m
                left join inv_movement m1 ON m.movementkey = m1.movementkey and m.documentkey = m1.documentkey and m.id <> m1.id
                left join gd_contact com ON m.CONTACTKEY = com.id
                left join gd_contact dep ON m1.contactkey = dep.id
                left join inv_card c ON m.CARDKEY = c.id
            where
              m.debit > 0 and (com.LB > :lb and com.RB > :rb) and
              dep.LB >= :lb and dep.rb <= :rb
              AND (m.MOVEMENTDATE >= :DATEBEGIN AND m.MOVEMENTDATE <= :DATEEND)
              AND c.GOODKEY =:GOODKEY
              AND c.USR$CN_ACTVALUATION = :ACTVALUATION
              group by 1,2)
            INTO :DEBIT, :CREDIT;
           SUSPEND;
        END
      RDB$DESCRIPTION: | 
        Показывает оборот по товару за указанный період по организации
        вх. парк-ры: 
            GOODKEY INTEGER,
            ACTVALUATION INTEGER,
            ACOMPANYKEY INTEGER,
            DATEBEGIN DATE,
            DATEEND DATE
  - 
    Properties: 
      Class: "TgdcStoredProc"
      RUID: 147061769_2089375573
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      PROCEDURENAME: "USR$CN_P_SALDOGOOD"
      EDITIONDATE: 2023-06-07T13:32:58+02:00
      PROCEDURESOURCE: | 
        CREATE OR ALTER PROCEDURE USR$CN_P_SALDOGOOD (
            GOODKEY INTEGER,
            DEPKEY INTEGER,
            ACTVALUATION INTEGER,
            COMPANYKEY INTEGER,
            DB DATE,
            DE DATE)
        RETURNS ( 
            ID INTEGER,
            BEGINSALDO NUMERIC(15, 4),
            DEBIT NUMERIC(15, 4),
            CREDIT NUMERIC(15, 4),
            ENDSALDO NUMERIC(15, 4))
         AS
        DECLARE VARIABLE LB INTEGER;
        DECLARE VARIABLE RB INTEGER;
        BEGIN
        
          SELECT LB, RB FROM GD_CONTACT WHERE ID = :DEPKEY
          INTO :LB, :RB;
          ID = :GOODKEY;
          EXECUTE PROCEDURE USR$CN_P_REMAINSONDATE(:GOODKEY, :DB, :ACTVALUATION, :COMPANYKEY) RETURNING_VALUES :BEGINSALDO;
        
          EXECUTE PROCEDURE USR$CN_P_MOVEGOODBYCOMPANY(:GOODKEY,:ACTVALUATION,:COMPANYKEY,:DB,:DE) RETURNING_VALUES (:DEBIT, :CREDIT);
        
          EXECUTE PROCEDURE USR$CN_P_REMAINSONDATE(:GOODKEY, :DE, :ACTVALUATION, :COMPANYKEY) RETURNING_VALUES :ENDSALDO;
        
          SUSPEND;
        END
      RDB$DESCRIPTION: ~
  - 
    Properties: 
      Class: "TgdcStoredProc"
      RUID: 147061236_2089375573
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      PROCEDURENAME: "USR$CN_P_CONFISCATNEWCOST"
      EDITIONDATE: 2023-06-12T08:24:46+02:00
      PROCEDURESOURCE: | 
        CREATE OR ALTER PROCEDURE USR$CN_P_CONFISCATNEWCOST (
            ADATE DATE,
            ACOMPANYKEY INTEGER,
            ACARDKEY VARCHAR(1500))
        RETURNS ( 
            CARDKEY INTEGER,
            GOODKEY INTEGER,
            CONTACTKEY INTEGER,
            QUANTITY NUMERIC(15, 4),
            COSTPROVIDER NUMERIC(15, 4),
            COSTRETAIL NUMERIC(15, 4),
            ACTVALUATION INTEGER,
            ACTVALUATIONST VARCHAR(250),
            DATERECEIVE DATE,
            QDAY SMALLINT,
            LASTDATERECOST DATE,
            QDAYBETWEENRECOST SMALLINT,
            COSTPERC NUMERIC(15, 4),
            NEWCOST NUMERIC(15, 4),
            DELTASUM NUMERIC(15, 4),
            QSELLDAYCONST SMALLINT,
            CONSTSELLPERC NUMERIC(15, 4),
            REALSELLPERC NUMERIC(15, 4))
         AS
        DECLARE VARIABLE Y INTEGER;
        DECLARE VARIABLE tMonth INTEGER;
        DECLARE VARIABLE M INTEGER;
        DECLARE VARIABLE D INTEGER;
        DECLARE VARIABLE CLB INTEGER;
        DECLARE VARIABLE CRB INTEGER;
        DECLARE VARIABLE TEMPDATE DATE;
        DECLARE VARIABLE ROUNDING NUMERIC(15,4);
        DECLARE VARIABLE ADDING SMALLINT;
        DECLARE VARIABLE CONFISCAT_GROUP INTEGER;
        
        DECLARE VARIABLE beginsaldo NUMERIC(15,4);
        DECLARE VARIABLE debit NUMERIC(15,4);
        DECLARE VARIABLE credit NUMERIC(15,4);
        DECLARE VARIABLE Endsaldo NUMERIC(15,4);
        DECLARE VARIABLE tBSaldo NUMERIC(15,4);
        DECLARE VARIABLE tESaldo NUMERIC(15,4);
        
        DECLARE VARIABLE CKEYSTR VARCHAR(1500);
        
        BEGIN
          NEWCOST = 0;
          DELTASUM = 0;
          ACTVALUATIONST = '';
          QSELLDAYCONST = 0;
          REALSELLPERC = 0;
          CKEYSTR = '';
          
          IF (ACARDKEY<>'') Then
            CKEYSTR = 'HAVING MIN(M.CARDKEY) IN (' || :ACARDKEY || ')';
        
          /* константы из USR$CN_OPTIONS */
          
          SELECT FIRST(1) USR$ROUNDING, USR$NEWCOSTPERC, USR$QDAYSELL, USR$SELLPERC FROM USR$CN_OPTIONS
          INTO :rounding, :COSTPERC, :QSELLDAYCONST, :CONSTSELLPERC;
        
          SELECT LB, RB FROM gd_contact WHERE ID = :ACompanyKey
          INTO :CLB, CRB;
        
          if (ROUNDING is NULL) then
            ROUNDING = 0.01;
        
          /* выборка только для ТМЦ входящих в группу "КНФИСКАТ" */
          EXECUTE PROCEDURE GD_P_GETID(147047409, 2082756242) RETURNING_VALUES :CONFISCAT_GROUP;
        
          FOR
             EXECUTE STATEMENT
             'SELECT
             MIN(M.CARDKEY),
             G.ID,
             SUM ( M.BALANCE ),
             c.USR$INV_COSTPROVIDER,
             c.USR$INV_DATERECEIVE,
             c.USR$INV_COSTRETAILNCU,
             c.USR$CN_ACTVALUATION,
             CON.ID AS CONTACTKEY,
             COALESCE(c.USR$LASTDATERECOST,c.USR$INV_DATERECEIVE)
             FROM
              ( SELECT
                  M.CARDKEY,
                  M.CONTACTKEY,
                  M.BALANCE
                FROM INV_BALANCE M
                JOIN GD_CONTACT CON ON M.CONTACTKEY  =  CON.ID AND CON.LB >=' ||  :CLB || 'AND CON.RB <= ' || :CRB ||
             '  JOIN GD_GOOD G ON ( G.ID  =  M.GOODKEY )
                LEFT JOIN GD_GOODGROUP GG ON ( G.GROUPKEY  =  GG.ID )
                LEFT JOIN GD_GOODGROUP GCON ON GCON.LB<=GG.LB AND GCON.RB>=GG.RB
                WHERE
                M.BALANCE  <>  0
                AND GCON.ID =' || :CONFISCAT_GROUP || ') M
              LEFT JOIN INV_CARD C ON C.ID  =  M.CARDKEY
              LEFT JOIN GD_GOOD G ON G.ID  =  C.GOODKEY
              JOIN GD_CONTACT CON ON M.CONTACTKEY  =  CON.ID AND  CON.LB  >=' || :CLB  || ' AND CON.RB  <=' || :CRB ||
           '  LEFT JOIN GD_GOODGROUP GG ON( G.GROUPKEY  =  GG.ID )
              LEFT JOIN GD_GOODGROUP GCON ON GCON.LB<=GG.LB AND GCON.RB>=GG.RB
             WHERE
                M.BALANCE  <>  0
                AND GCON.ID =' || :CONFISCAT_GROUP || '
              AND G.ID NOT IN (
                SELECT
                  Gi.ID
                FROM GD_GOOD Gi
                JOIN USR$CN_EXCEPTGOOD Eg ON EG.USR$GOODKEY = Gi.ID
                UNION ALL
                SELECT
                  Gi.ID
                FROM GD_GOOD Gi
                JOIN USR$CN_EXCEPTGOOD EGG ON EGG.USR$GOODGROUPKEY = Gi.GROUPKEY)  /* исключаем из выборки товары икслючения, в том числе и по группе. группы в справочнике исключений перечисляем */
            GROUP BY
             G.ID,
             c.USR$INV_COSTPROVIDER,
             c.USR$INV_DATERECEIVE,
             c.USR$INV_COSTRETAILNCU,
             c.USR$CN_ACTVALUATION,
             CON.ID,
             9 '
             ||  :CKEYSTR
            INTO :CARDKEY, :GOODKEY, :QUANTITY,  :COSTPROVIDER,  :DATERECEIVE, :COSTRETAIL, :ACTVALUATION, :CONTACTKEY,  :LASTDATERECOST
          DO
          BEGIN
            /* КОЛИЧЕСТВО ДНЕЙ МЕЖДУ ПОСТУПЛЕНИЕМ И ДАТОЙ ПЕРЕОЦЕНКИ */
            SELECT DATEDIFF(DAY, :DATERECEIVE, :ADATE) + 1 FROM RDB$DATABASE
            INTO :qDay;
        
            /* КОЛИЧЕСТВО ДНЕЙ МЕЖДУ ПЕРЕОЦЕНКАМИ. ЕСЛИ ПЕРЕОЦЕНКИ НЕ БЫЛО, СЧИТАЕМ ЗА ДАТУ ПОСЛЕДНЕЙ ПЕРЕОЦЕНКИ ДАТУ ПОСТУПЛЕНИЯ*/
            SELECT DATEDIFF(DAY, :LASTDATERECOST, :ADATE) + 1 FROM RDB$DATABASE
            INTO :qDAYBETWEENRECOST;
            
            /*  НОМЕР АКТА  */
            SELECT USR$DOCNUMBER || ' от ' || CAST(USR$DOCNUMBER AS VARCHAR(10)) FROM USR$CN_ACTVALUATION WHERE ID  = :ACTVALUATION
            INTO :ACTVALUATIONST;
            
            /*  ПРОЦЕДУРА ИЩЕТ САЛЬДО, ДЕБЕТ, КРЕДИТ  */
            SELECT * FROM USR$CN_P_SALDOGOOD(:GOODKEY, :CONTACTKEY, :ACTVALUATION, :ACompanyKey, :LASTDATERECOST, :adate)
            INTO :goodkey, :BeginSaldo, :debit,:credit, :endsaldo;
            
            /* % РЕАЛИЗАЦИИ СЧИТАЕМ КАК ОТНОШЕНИЕ РЕАЛИЗОВАННОГО ТОВАРА К САЛЬДО НА НАЧАЛО ПЕРИОДА
               ЗДЕСЬ ВОЗМОЖНЫ ПРАВКИ, ПОСКОЛЬКУ ТОЧНОГО АЛГОРИТМА ДВИЖЕНИЯ НЕТ
            */
            
            tBSaldo = :BeginSaldo + :debit;
            tEsaldo = tBSaldo - :credit;
        
            if (:tBSaldo<>0) Then
              REALSELLPERC = :credit /:tBSaldo * 100;
              
            /* РАСЧЕТ НОВОЙ ЦЕНЫ ВЕДЕТСЯ ОТ ПЕРВОНАЧАЛЬНОЙ ЦЕНЫ ПОСТАВЩИКА СОГЛАСНО ЗАДАННОГО %
               НАХОДИМ ДЕЛЬТУ,, ОКРУГЛЕННУЮ ДО 2 ЗНАКОВ И ОТНИМАЕМ ЕЕ ОТ ПЕРВОНАЧАЛЬНОЙ ЦЕНЫ */
               
            DELTASUM  =  ROUND(:COSTPROVIDER * :COSTPERC/100, 2);
            NEWCOST = :COSTRETAIL - :DELTASUM;
            SUSPEND;
          END
        END
        
      RDB$DESCRIPTION: ~