%YAML 1.1
--- 
StructureVersion: "1.0"
Properties: 
  RUID: 299409510_2076379983
  Name: "Акт преобразования. Экспорт на КС"
  Caption: "Акт преобразования. Экспорт на КС"
  Version: "1.0.0.2"
  Optional: False
  Internal: True
  MD5: E81BD296F07F3F0B36BB736D1BCE93F5
Uses: 
  - "147753351_73094925 GS.Общие.Метаданные.Домены"
  - "147698172_43451302 Мат_склад - метаданные"
  - "261727802_1437966193 Export_to_CServer_expirydate"
  - "299409376_2076379983 Акт преобразования. док-т"
Objects: 
  - 
    Properties: 
      Class: "TgdcTableField"
      RUID: 299409487_2076379983
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      ALIGNMENT: "L"
      COLWIDTH: 20
      CROSSFIELD: ~
      CROSSFIELDKEY: ~
      CROSSTABLE: ~
      CROSSTABLEKEY: ~
      DELETERULE: ~
      DESCRIPTION: "USR$PFD_DELIVERED"
      FIELDNAME: "USR$PFD_DELIVERED"
      FIELDSOURCE: "DBOOLEAN"
      FIELDSOURCEKEY: "147000135_486813904 Логическое, DBOOLEAN"
      FORMAT: ~
      GDCLASSNAME: ~
      GDSUBTYPE: ~
      LNAME: "Передан на сервер"
      LSHORTNAME: "Передан на сервер"
      NULLFLAG: ~
      READONLY: 0
      REFCROSSRELATION: ~
      REFLISTFIELD: ~
      REFRELATIONNAME: ~
      RELATIONKEY: "147872777_30358866 Акт переработки, USR$INV_ACTWORK"
      RELATIONNAME: "USR$INV_ACTWORK"
      RELATIONTYPE: "T"
      SEMCATEGORY: ~
      SETLISTFIELD: ~
      SETLISTFIELDKEY: ~
      SOURCENULLFLAG: ~
      STRINGLENGTH: ~
      VISIBLE: 1
      EDITIONDATE: 2023-04-10T16:02:05+03:00
      COMPUTED_VALUE: ~
      DEFSOURCE: | 
        DEFAULT 0
      OBJECTS: ~
  - 
    Properties: 
      Class: "TgdcTableField"
      RUID: 299409488_2076379983
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      ALIGNMENT: "L"
      COLWIDTH: 20
      CROSSFIELD: ~
      CROSSFIELDKEY: ~
      CROSSTABLE: ~
      CROSSTABLEKEY: ~
      DELETERULE: ~
      DESCRIPTION: "USR$ISEXPORT"
      FIELDNAME: "USR$ISEXPORT"
      FIELDSOURCE: "DBOOLEAN"
      FIELDSOURCEKEY: "147000135_486813904 Логическое, DBOOLEAN"
      FORMAT: ~
      GDCLASSNAME: ~
      GDSUBTYPE: ~
      LNAME: "Экспортировано"
      LSHORTNAME: "Экспортировано"
      NULLFLAG: ~
      READONLY: 0
      REFCROSSRELATION: ~
      REFLISTFIELD: ~
      REFRELATIONNAME: ~
      RELATIONKEY: "147872785_30358866 Акт переработки(позиция), USR$INV_ACTWORKLINE"
      RELATIONNAME: "USR$INV_ACTWORKLINE"
      RELATIONTYPE: "T"
      SEMCATEGORY: ~
      SETLISTFIELD: ~
      SETLISTFIELDKEY: ~
      SOURCENULLFLAG: ~
      STRINGLENGTH: ~
      VISIBLE: 1
      EDITIONDATE: 2023-04-10T16:02:56+03:00
      COMPUTED_VALUE: ~
      DEFSOURCE: | 
        DEFAULT 0
      OBJECTS: ~
  - 
    Properties: 
      Class: "TgdcTableField"
      RUID: 299409489_2076379983
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      ALIGNMENT: "L"
      COLWIDTH: 20
      CROSSFIELD: ~
      CROSSFIELDKEY: ~
      CROSSTABLE: ~
      CROSSTABLEKEY: ~
      DELETERULE: ~
      DESCRIPTION: "USR$ISSPEND"
      FIELDNAME: "USR$ISSPEND"
      FIELDSOURCE: "DBOOLEAN"
      FIELDSOURCEKEY: "147000135_486813904 Логическое, DBOOLEAN"
      FORMAT: ~
      GDCLASSNAME: ~
      GDSUBTYPE: ~
      LNAME: "Списано"
      LSHORTNAME: "Списано"
      NULLFLAG: ~
      READONLY: 0
      REFCROSSRELATION: ~
      REFLISTFIELD: ~
      REFRELATIONNAME: ~
      RELATIONKEY: "147872785_30358866 Акт переработки(позиция), USR$INV_ACTWORKLINE"
      RELATIONNAME: "USR$INV_ACTWORKLINE"
      RELATIONTYPE: "T"
      SEMCATEGORY: ~
      SETLISTFIELD: ~
      SETLISTFIELDKEY: ~
      SOURCENULLFLAG: ~
      STRINGLENGTH: ~
      VISIBLE: 1
      EDITIONDATE: 2023-04-10T16:03:07+03:00
      COMPUTED_VALUE: ~
      DEFSOURCE: | 
        DEFAULT 0
      OBJECTS: ~
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 299409478_2076379983
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 299409476_2076379983
    Fields: 
      NAME: "Macros299409478_2076379983"
      COMMENT: ~
      EVENT: ~
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "MACROS"
      MODULECODE: "299408923_2076379983 gdc_frmInvDocument299408909_2076379983"
      OBJECTNAME: "gdc_frmInvDocument299408909_2076379983"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: 0
      EDITIONDATE: 2023-04-10T15:25:29+03:00
      DISPLAYSCRIPT: | 
        MACROS299409478_2076379983
        
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QJAAAAT1dORVJGT1JNCQAAAE9XTkVSRk9STQAAAAAAAAAAAAAAAAsAAAAAAAAAAAAA
        AABGTlNURkxQUg==
      SCRIPT: | 
        '#include PFD_EXPORTFROMDEPOTINSERVER
        Option Explicit
        Sub Macros299409478_2076379983(OwnerForm)
          If OwnerForm.gdcObject.FieldByName("DELAYED").AsInteger = 1 Then
            MsgBox "Накладная отложена!"
            Exit Sub
          End If
        
          Call pfd_ExportFromDepotInServer(_
            OwnerForm.gdcObject.FieldByName("USR$FROMCONTACTKEY").AsInteger, _
            OwnerForm.gdcObject.ID, _
            OwnerForm.gdcObject.FieldByName("DOCUMENTTYPEKEY").AsInteger, _
            0, _
            OwnerForm.gdcObject, _
            False)
        End Sub
        
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147032799_917536542 pfd_ExportFromDepotInServer"
  - 
    Properties: 
      Class: "TgdcMacros"
      RUID: 299409476_2076379983
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "Экспорт на КС"
      DISPLAYINMENU: 1
      EXECUTEDATE: ~
      FUNCTIONKEY: "299409478_2076379983 Macros299409478_2076379983"
      ISLOCALEXECUTE: 0
      ISREBUILD: 0
      MACROSGROUPKEY: "299408933_2076379983 Локальные макросы"
      OBJECTNAME: "gdc_frmInvDocument299408909_2076379983"
      SERVERKEY: ~
      SHORTCUT: 0
      EDITIONDATE: 2023-04-10T15:25:29+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147032951_917536542
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147032799_917536542
    Fields: 
      NAME: "pfd_SyncDepot"
      COMMENT: ~
      EVENT: ~
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "UNKNOWN"
      MODULECODE: "1010001_17 APPLICATION"
      OBJECTNAME: "APPLICATION"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: ~
      EDITIONDATE: 2007-11-15T17:36:54+03:00
      DISPLAYSCRIPT: | 
        PFD_SYNCDEPOT
        
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QIAAAAR09PRE5BTUUIAAAAR09PRE5BTUUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        Rk5TVFBSU1QJAAAAR09PREFMSUFTCQAAAEdPT0RBTElBUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABGTlNUUFJTVAcAAABCQVJDT0RFBwAAAEJBUkNPREUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        Rk5TVFBSU1QJAAAAVkFMVUVOQU1FCQAAAFZBTFVFTkFNRQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABGTlNUUFJTVAgAAABJU1dFSUdIVAgAAABJU1dFSUdIVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABGTlNUUFJTVAoAAABXRUlHSFRDT0RFCgAAAFdFSUdIVENPREUAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAARk5TVFBSU1QGAAAASVNGUkFDBgAAAElTRlJBQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABGTlNUUFJTVAEAAABUAQAAAFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARk5TVFBSU1QHAAAA
        RE9OVEFERAcAAABET05UQUREAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZOU1RGTFBS
      SCRIPT: | 
        option explicit
        function pfd_SyncDepot( _
            GoodName, GoodAlias, BarCode, ValueName, _
            IsWeight, WeightCode, IsFrac, T, DontAdd)
          pfd_SyncDepot = -1
        
          dim GoodKey
          GoodKey = -1
        
          dim Creator, q
          set Creator = new TCreator
          set q = Creator.GetObject(nil, "TIBSQL", "")
          q.Transaction = T
          q.SQL.Text = _
            "SELECT FIRST 1 ID " & _
            "FROM GD_GOOD " & _
            "WHERE NAME = :PName AND COALESCE(ALIAS, '') = :PAlias AND COALESCE(BARCODE, '') = :PBarcode "
          q.ParamByName("PName").AsString = GOODNAME
          q.ParamByName("PAlias").AsVariant = GOODALIAS
          q.ParamByName("PBarcode").AsVariant = BARCODE
          q.ExecQuery
          if not q.EoF then
            GoodKey = q.FieldByName("ID").AsInteger
          end if
        
          if GoodKey > - 1 then
            pfd_SyncDepot = GoodKey
          else
            ' если товар не найден, добавляем его (но только если не стоит признак DontAdd)
            if not DontAdd then
              q.Close
              dim ValueKey
              q.SQL.Text = _
                "SELECT FIRST 1 ID " & _
                "FROM GD_VALUE " & _
                "WHERE NAME = :PName "
              q.ParamByName("PName").AsString = VALUENAME
              q.ExecQuery
              if not q.EoF then
                ValueKey = q.FieldByName("ID").AsInteger
              else
                dim gdcValueIns
                set gdcValueIns = Creator.GetObject(nil, "TgdcValue", "")
                gdcValueIns.Transaction = T
                gdcValueIns.Open
                gdcValueIns.Insert
                gdcValueIns.FieldByName("NAME").AsString = _
                  VALUENAME
                gdcValueIns.Post
                ValueKey = gdcValueIns.ID
              end if
        
              dim gdcGoodIns
              set gdcGoodIns = Creator.GetObject(nil, "TgdcGood", "")
              gdcGoodIns.Transaction = T
              gdcGoodIns.Open
              gdcGoodIns.Insert
              gdcGoodIns.FieldByName("NAME").AsString = _
                GOODNAME
              gdcGoodIns.FieldByName("ALIAS").AsString = _
                GOODALIAS
              gdcGoodIns.FieldByName("BARCODE").AsString = _
                BARCODE
                
        '  dim sqlGroup
        '  set sqlGroup = Creator.GetObject(nil, "TIBSQL", "")
        '  sqlGroup.Transaction = T
        '  sqlGroup.SQL.Text = _
        '    "SELECT FIRST 1 ID " & _
        '    "FROM GD_GOOD " & _
        '    "WHERE NAME = :PName AND COALESCE(ALIAS, '') = :PAlias AND COALESCE(BARCODE, '') = :PBarcode "
        '  sqlGroup.ParamByName("PName").AsString = GOODNAME
        '  sqlGroup.ParamByName("PAlias").AsVariant = GOODALIAS
        '  sqlGroup.ParamByName("PBarcode").AsVariant = BARCODE
        '  sqlGroup.ExecQuery
        '
        '
        ''  if GRKEY
        '  dim sqlGr
        '  set sqlGr = Creator.GetObject(nil, "TIBSQL", "")
        '  sqlGr.Transaction = T
        '  sqlGr.SQL.Text = _
        '    "SELECT gr2.ID, gr2.NAME " & _
        '    "FROM GD_GOOD g " & _
        '    "  LEFT JOIN GD_GOODGROUP gr ON g.GROUPKEY = gr.ID " & _
        '    "  LEFT JOIN GD_GOODGROUP gr2 ON gr2.LB < gr.LB AND gr2.RB > gr.RB " & _
        '    "WHERE NAME = :PName AND COALESCE(ALIAS, '') = :PAlias AND COALESCE(BARCODE, '') = :PBarcode "
        '  sqlGr.ParamByName("PName").AsString = GOODNAME
        '  sqlGr.ParamByName("PAlias").AsVariant = GOODALIAS
        '  sqlGr.ParamByName("PBarcode").AsVariant = BARCODE
        '  sqlGr.ExecQuery
                
                
                
                
              gdcGoodIns.FieldByName("GROUPKEY").AsInteger = _
                gdcBaseManager.GetIDByRUIDString(pf_good_allgoods)
              gdcGoodIns.FieldByName("VALUEKEY").AsInteger = ValueKey
              
              gdcGoodIns.FieldByName("USR$PF_ISWEIGHT").AsInteger = ISWEIGHT
              gdcGoodIns.FieldByName("USR$PF_WEIGHTCODE").AsInteger = WEIGHTCODE
              gdcGoodIns.FieldByName("USR$PF_ISFRAC").AsInteger = ISFRAC
              
              gdcGoodIns.Post
              GoodKey = gdcGoodIns.ID
            end if
          end if
        
          pfd_SyncDepot = GoodKey
        end function
        
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147034572_918566284
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147032799_917536542
    Fields: 
      NAME: "pfd_FindOrAddGood"
      COMMENT: ~
      EVENT: ~
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "UNKNOWN"
      MODULECODE: "1010001_17 APPLICATION"
      OBJECTNAME: "APPLICATION"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: ~
      EDITIONDATE: 2021-04-14T12:56:16+03:00
      DISPLAYSCRIPT: | 
        PFD_FINDORADDGOOD
        PFD_FINDORADDGOOD_INSLOG
        DEL_ADDRUID
        
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QMAAAATE9DQUxHT09ES0VZDAAAAExPQ0FMR09PREtFWQAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAABGTlNUUFJTVAEAAABUAQAAAFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARk5TVFBS
        U1QHAAAARE9OVEFERAcAAABET05UQUREAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZOU1RGTFBS
      SCRIPT: | 
        option explicit
        function pfd_FindOrAddGood(LocalGoodKey, T, DontAdd)
          pfd_FindOrAddGood = -1
        
          err.Clear
         ' on error resume next
          dim GoodKey
          GoodKey = -1
        
          ' ищем на базе склада РУИД ТМЦ
          dim XID, DBID
          XID = -1
          DBID = -1
        
          dim Creator, q, qLocal, LT, MaxDiscPercServer, MaxDiscPercLocal
          set Creator = new TCreator
        
          set LT = Creator.GetObject(nil, "TIBTransaction", "")
          LT.DefaultDataBase = gdcBaseManager.DataBase
          call LT.Params.Add("nowait")
          call LT.Params.Add("read_committed")
          call LT.Params.Add("rec_version")
          LT.StartTransaction
        
          set qLocal = Creator.GetObject(nil, "TIBSQL", "")
          qLocal.Transaction = LT
          qLocal.SQL.Text = _
            "SELECT r.XID, r.DBID, COALESCE(g.USR$MAXDISCPERC, 0) AS USR$MAXDISCPERC " & _
            "FROM GD_GOOD g " & _
            "LEFT JOIN USR$PFD_GET_RUID(g.ID) r ON 1 = 1 " & _
            "WHERE g.ID = :LocalGoodKey"
          qLocal.ParamByName("LocalGoodKey").AsInteger = LocalGoodKey
          qLocal.ExecQuery
          XID = qLocal.FieldByName("XID").AsInteger
          DBID = qLocal.FieldByName("DBID").AsInteger
          MaxDiscPercLocal = qLocal.FieldByName("USR$MAXDISCPERC").AsCurrency
        
          if (XID <= 0) or (DBID <= 0) then Exit Function
        
          ' ищем на базе кассового сервера этот товар по РУИДу
        
          set q = Creator.GetObject(nil, "TIBSQL", "")
          q.Transaction = T
          q.SQL.Text = _
            "SELECT FIRST 1 g.ID, COALESCE(g.USR$MAXDISCPERC, 0) AS USR$MAXDISCPERC " & _
            "FROM GD_RUID r " & _
            "JOIN GD_GOOD g ON g.ID = r.ID " & _
            "WHERE r.XID = :XID AND r.DBID = :DBID "
          q.ParamByName("XID").AsInteger = XID
          q.ParamByName("DBID").AsInteger = DBID
          q.ExecQuery
          MaxDiscPercServer = 0
          if not q.EoF then
            GoodKey = q.FieldByName("ID").AsInteger
            MaxDiscPercServer = q.FieldByName("USR$MAXDISCPERC").AsInteger
          end if
          q.Close
        
          dim qInsRuid
          set qInsRuid = Creator.GetObject(nil, "TIBSQL", "")
          qInsRuid.Transaction = T
          qInsRuid.SQL.Text = _
            "EXECUTE BLOCK( " & _
            "  ObjectKey INTEGER = :ObjectKey, " & _
            "  XID INTEGER = :XID, " & _
            "  DBID INTEGER = :DBID " & _
            ") " & _
            "AS " & _
            "BEGIN " & _
            "  DELETE FROM GD_RUID r WHERE (XID = :XID AND DBID = :DBID) OR ID = :ObjectKey; " & _
            "   " & _
            "  INSERT INTO GD_RUID(ID, XID, DBID, MODIFIED) VALUES(:ObjectKey, :XID, :DBID, current_timestamp); " & _
            "END "
        
          dim qGenID
          set qGenID = Creator.GetObject(nil, "TIBSQL", "")
          qGenID.Transaction = T
          qGenID.SQL.Text = _
            "SELECT " & _
            "GEN_ID(gd_g_unique, 1) + GEN_ID(gd_g_offset, 0) AS NewID " & _
            "FROM RDB$DATABASE "
        
        '  dim qLog
        '  set qLog = Creator.GetObject(nil, "TIBSQL", "")
        '  qLog.Transaction = T
        '  qLog.SQL.Text = _
        '    "INSERT INTO USR$PF_LOGSYNCHR(ID, USR$SUBTYPE, USR$OBJECTRUID, USR$OBJECTKEY, USR$OPERATION, USR$OBJSYNCHRKEY) " & _
        '    " VALUES(:ID, :USR$SUBTYPE, :USR$OBJECTRUID, :USR$OBJECTKEY, 0, :USR$OBJSYNCHRKEY)"
        
        '  dim qFindLog
        '  set qFindLog = Creator.GetObject(nil, "TIBSQL", "")
        '  qFindLog.Transaction = T
        '  qFindLog.SQL.Text = _
        '    " SELECT FIRST 1 ID  " & _
        '    " FROM USR$PF_OBJECTSYNCHR  " & _
        '    " WHERE USR$CLASSNAME = :CN AND COALESCE(USR$DISABLED, 0) = 0  " & _
        '    " ORDER BY USR$SORTNUMBER  "
        
        '  dim qCash
        '  set qCash = Creator.GetObject(nil, "TIBSQL", "")
        '  qCash.Transaction = T
        '  qCash.SQL.Text = _
        '    "INSERT INTO USR$PF_CASHLOG(USR$LOGKEY, USR$CASHKEY) " & _
        '    " VALUES(:USR$LOGKEY, :USR$CASHKEY)"
        
        '  dim qFindCash
        '  set qFindCash = Creator.GetObject(nil, "TIBSQL", "")
        '  qFindCash.Transaction = T
        '  qFindCash.SQL.Text = _
        '    " SELECT ID  " & _
        '    " FROM USR$PF_CASH  " & _
        '    " WHERE COALESCE(USR$SYNCHR, 0) <> 0  "
        
          ' Нашли - выходим
          if GoodKey > - 1 then
            pfd_FindOrAddGood = GoodKey
        
        '*************************************************************************************************
        
            qLocal.Close
            qLocal.SQL.Text = _
              "SELECT " & _
              "  ID, " & _
              "  r.XID AS GRXID, r.DBID AS GRDBID, " & _
              "  r1.XID AS VXID, r1.DBID AS VDBID, " & _
              "  NAME, " & _
              "  ALIAS, " & _
              "  BARCODE, " & _
              "  USR$PF_ISFRAC, " & _
              "  USR$PF_ISWEIGHT, " & _
              "  USR$PF_WEIGHTCODE, " & _
              "  SHORTNAME, " & _
              "  USR$MAXDISCPERC, " & _
              "  DESCRIPTION, USR$CONTENT " & _
              "FROM GD_GOOD g " & _
              "LEFT JOIN USR$PFD_GET_RUID(g.GROUPKEY) r ON 1 = 1 " & _
              "LEFT JOIN USR$PFD_GET_RUID(g.VALUEKEY) r1 ON 1 = 1 " & _
              "WHERE g.ID = :ID "
            qLocal.ParamByName("ID").AsInteger = LocalGoodKey
            qLocal.ExecQuery
        
            'ед. изм.
            dim OurObj
            set OurObj = Creator.GetObject(null, "TIBSQL", "")
            OurObj.Transaction = LT
            OurObj.SQL.Text = _
              "SELECT " & _
              "  v.NAME, v.ISPACK, v.DESCRIPTION " & _
              "FROM GD_VALUE v " & _
              "LEFT JOIN USR$PFD_GET_RUID(v.ID) r ON 1 = 1 " & _
              "WHERE r.XID = :XID AND r.DBID = :DBID "
            OurObj.ParamByName("XID").AsInteger = qLocal.FieldByName("VXID").AsInteger
            OurObj.ParamByName("DBID").AsInteger = qLocal.FieldByName("VDBID").AsInteger
            OurObj.ExecQuery
        
            q.Close
            q.SQL.Text = _
              "SELECT v.ID " & _
              "FROM GD_VALUE v " & _
              "LEFT JOIN  USR$PFD_GET_RUID(v.ID) r ON 1 = 1 " & _
              "WHERE r.XID = :XID AND r.DBID = :DBID "
            q.ParamByName("XID").AsInteger = qLocal.FieldByName("VXID").AsInteger
            q.ParamByName("DBID").AsInteger = qLocal.FieldByName("VDBID").AsInteger
            q.ExecQuery
        
            dim vKey, GrKey, ParKey
            if q.Eof then
              qGenID.Close
              qGenID.ExecQuery
              vKey = qGenID.FieldByName("NewID").AsInteger
            else
              vKey = q.FieldByName("ID").AsInteger
            end if
        
            q.Close
            q.SQL.Text = _
              "EXECUTE BLOCK ( " & _
              "    VALUEKEY INTEGER = :ID, " & _
              "    NAME VARCHAR(60) = :VALUENAME, " & _
              "    ISPACK CHAR(1) = :ISPACK, " & _
              "    DESCRIPTION VARCHAR(120) = :DESCRIPTION) " & _
              " AS " & _
              "DECLARE VARIABLE TEMPID INTEGER; " & _
              "BEGIN " & _
              "  SELECT ID FROM GD_VALUE WHERE ID = :VALUEKEY " & _
              "  INTO TEMPID; " & _
              " " & _
              "  IF (TEMPID IS NULL) THEN " & _
              "    INSERT INTO GD_VALUE(ID, NAME, ISPACK, DESCRIPTION) " & _
              "    VALUES(:VALUEKEY, :NAME, :ISPACK, :DESCRIPTION); " & _
              "  ELSE " & _
              "    UPDATE GD_VALUE " & _
              "    SET " & _
              "      NAME = :NAME, " & _
              "      ISPACK = :ISPACK, " & _
              "      DESCRIPTION = :DESCRIPTION " & _
              "    WHERE ID = :VALUEKEY; " & _
              "END "
            q.ParamByName("ID").AsInteger = vKey
            q.ParamByName("VALUENAME").AsString = OurObj.FieldByName("NAME").AsString
            q.ParamByName("ISPACK").AsVariant = OurObj.FieldByName("ISPACK").AsVariant
            q.ParamByName("DESCRIPTION").AsString = OurObj.FieldByName("DESCRIPTION").AsString
            q.ExecQuery
        
            call Del_AddRuid(vKey, qLocal.FieldByName("VXID").AsInteger, qLocal.FieldByName("VDBID").AsInteger, T)
        
            'группа тмц
            OurObj.Close
            OurObj.SQL.Text = _
              "SELECT " & _
              "  grP.LB, grP.ID, grP.NAME, grP.ALIAS, r.XID, r.DBID,  rP.XID AS PXID, rP.DBID AS PDBID " & _
              "FROM GD_GOOD g " & _
              "JOIN GD_GOODGROUP gr ON gr.ID = g.GROUPKEY " & _
              "JOIN GD_GOODGROUP grP ON grP.LB <= gr.LB AND grP.RB >= gr.RB " & _
              "LEFT JOIN USR$PFD_GET_RUID(grP.ID) r ON 1=1 " & _
              "LEFT JOIN USR$PFD_GET_RUID(grP.PARENT) rP ON 1=1 " & _
              "WHERE g.ID = :GoodKey " & _
              "ORDER BY grP.LB ASC "
            OurObj.ParamByName("GoodKey").AsInteger = LocalGoodKey
            OurObj.ExecQuery
        
            q.Close
            q.SQL.Text = _
              "SELECT gr.ID " & _
              "FROM GD_GOODGROUP gr " & _
              "LEFT JOIN  USR$PFD_GET_RUID(gr.ID) r ON 1 = 1 " & _
              "WHERE r.XID = :XID AND r.DBID = :DBID "
        
        
            dim qChangeGroup
            set qChangeGroup = Creator.GetObject(null, "TIBSQL", "")
            qChangeGroup.Transaction = q.Transaction
            qChangeGroup.SQL.Text = _
              "EXECUTE BLOCK ( " & _
              "    GROUPKEY INTEGER = :ID, " & _
              "    PARENT INTEGER = :PARENT, " & _
              "    NAME VARCHAR(60) = :NAME, " & _
              "    ALIAS VARCHAR(16) = :ALIAS) " & _
              " AS " & _
              " DECLARE VARIABLE TEMPID INTEGER; " & _
              "BEGIN " & _
              "  SELECT ID FROM GD_GOODGROUP WHERE ID = :GROUPKEY " & _
              "  INTO TEMPID; " & _
              " " & _
              "  IF (TEMPID IS NULL) THEN " & _
              "    INSERT INTO GD_GOODGROUP(ID, PARENT, NAME, ALIAS) " & _
              "    VALUES(:GROUPKEY, :PARENT, :NAME, :ALIAS); " & _
              "  ELSE " & _
              "    UPDATE GD_GOODGROUP " & _
              "    SET " & _
              "    NAME = :NAME, " & _
              "    PARENT = :PARENT, " & _
              "    ALIAS = :ALIAS " & _
              "    WHERE ID = :GROUPKEY; " & _
              "END "
        
            while not OurObj.Eof
              q.Close
              q.ParamByName("XID").AsInteger = OurObj.FieldByName("XID").AsInteger
              q.ParamByName("DBID").AsInteger = OurObj.FieldByName("DBID").AsInteger
              q.ExecQuery
        
              if q.Eof then
                qGenID.Close
                qGenID.ExecQuery
                GrKey = qGenID.FieldByName("NewID").AsInteger
              else
                GrKey = q.FieldByName("ID").AsInteger
              end if
        
              q.Close
              q.ParamByName("XID").AsInteger = OurObj.FieldByName("PXID").AsInteger
              q.ParamByName("DBID").AsInteger = OurObj.FieldByName("PDBID").AsInteger
              q.ExecQuery
        
              if q.Eof then
                ParKey = NULL
              else
                ParKey = q.FieldByName("ID").AsInteger
              end if
        
              qChangeGroup.Close
              qChangeGroup.ParamByName("ID").AsInteger = GrKey
              qChangeGroup.ParamByName("PARENT").AsVariant = ParKey
              qChangeGroup.ParamByName("NAME").AsString = OurObj.FieldByName("NAME").AsString
              qChangeGroup.ParamByName("ALIAS").AsString = OurObj.FieldByName("ALIAS").AsString
              qChangeGroup.ExecQuery
        
              call Del_AddRuid(GrKey, OurObj.FieldByName("XID").AsInteger, OurObj.FieldByName("DBID").AsInteger, T)
              OurObj.Next
            wend
        
            'товар
            q.Close
            q.SQL.Text = _
              "EXECUTE BLOCK ( " & _
              "    GOODKEY INTEGER = :ID, " & _
              "    GROUPKEY INTEGER = :GROUPKEY, " & _
              "    VALUEKEY INTEGER = :VALUEKEY, " & _
              "    NAME VARCHAR(60) = :NAME, " & _
              "    ALIAS VARCHAR(16) = :ALIAS, " & _
              "    BARCODE VARCHAR(24) = :BARCODE, " & _
              "    USR$PF_ISFRAC INTEGER = :PF_ISFRAC, " & _
              "    USR$PF_ISWEIGHT INTEGER = :PF_ISWEIGHT, " & _
              "    USR$PF_WEIGHTCODE VARCHAR(20) = :PF_WEIGHTCODE, " & _
              "    SHORTNAME VARCHAR(60) = :SHORTNAME, " & _
              "    USR$MAXDISCPERC NUMERIC(7, 4) = :MAXDISCPERC, " & _
              "    DESCRIPTION VARCHAR(180) = :DESCRIPTION, " & _
              "    USR$CONTENT VARCHAR(1024) = :USR$CONTENT) " & _
              " AS " & _
              "DECLARE VARIABLE TEMPID INTEGER; " & _
              "BEGIN " & _
              "  SELECT ID FROM GD_GOOD WHERE ID = :GOODKEY " & _
              "  INTO TEMPID; " & _
              " " & _
              "  /*IF (TEMPID IS NULL) THEN " & _
              "    INSERT INTO GD_GOOD(ID, GROUPKEY, VALUEKEY, NAME, ALIAS, BARCODE, USR$PF_ISFRAC, USR$PF_ISWEIGHT, USR$PF_WEIGHTCODE, SHORTNAME, USR$MAXDISCPERC, DESCRIPTION) " & _
              "    VALUES(:GOODKEY, :GROUPKEY, :VALUEKEY, :NAME, :ALIAS, :BARCODE, :USR$PF_ISFRAC, :USR$PF_ISWEIGHT, :USR$PF_WEIGHTCODE, :SHORTNAME, :USR$MAXDISCPERC, :DESCRIPTION); " & _
              "  ELSE */" & _
              "    UPDATE GD_GOOD " & _
              "    SET " & _
              "      GROUPKEY  = :GROUPKEY, " & _
              "      VALUEKEY = :VALUEKEY, " & _
              "      NAME = :NAME, " & _
              "      ALIAS = :ALIAS, " & _
              "      BARCODE = :BARCODE, " & _
              "      USR$PF_ISFRAC = :USR$PF_ISFRAC, " & _
              "      USR$PF_ISWEIGHT = :USR$PF_ISWEIGHT, " & _
              "      USR$PF_WEIGHTCODE = :USR$PF_WEIGHTCODE, " & _
              "      SHORTNAME = :SHORTNAME, " & _
              "      USR$MAXDISCPERC = :USR$MAXDISCPERC, " & _
              "      DESCRIPTION = :DESCRIPTION, " & _
              "      USR$CONTENT = :USR$CONTENT " & _
              "    WHERE ID = :GOODKEY; " & _
              "END "
            q.Close
            q.ParamByName("ID").AsInteger = GoodKey
            q.ParamByName("GROUPKEY").AsInteger = GrKey
            q.ParamByName("VALUEKEY").AsInteger = vKey
            q.ParamByName("NAME").AsString = qLocal.FieldByName("NAME").AsString
            q.ParamByName("ALIAS").AsString = qLocal.FieldByName("ALIAS").AsString
            q.ParamByName("BARCODE").AsString = qLocal.FieldByName("BARCODE").AsString
            q.ParamByName("PF_ISFRAC").AsInteger = qLocal.FieldByName("USR$PF_ISFRAC").AsInteger
            q.ParamByName("PF_ISWEIGHT").AsInteger = qLocal.FieldByName("USR$PF_ISWEIGHT").AsInteger
            q.ParamByName("PF_WEIGHTCODE").AsString = qLocal.FieldByName("USR$PF_WEIGHTCODE").AsString
            q.ParamByName("SHORTNAME").AsString = qLocal.FieldByName("SHORTNAME").AsString
            q.ParamByName("MAXDISCPERC").AsCurrency = qLocal.FieldByName("USR$MAXDISCPERC").AsCurrency
            q.ParamByName("DESCRIPTION").AsString = qLocal.FieldByName("DESCRIPTION").AsString
            q.ParamByName("USR$CONTENT").AsString = qLocal.FieldByName("USR$CONTENT").AsString
            q.ExecQuery
        
            qLocal.Close
        
        '*************************************************************************************Edit by Yura
            if MaxDiscPercServer <> MaxDiscPercLocal then
              q.Close
              q.SQL.Text = "UPDATE GD_GOOD SET USR$MAXDISCPERC = :perc WHERE ID = :goodkey "
              q.ParamByName("goodkey").AsInteger = GoodKey
              q.ParamByName("perc").AsCurrency = MaxDiscPercLocal
              q.ExecQuery
            end if
            'Exit Function
          else
            ' если товар не найден, добавляем его
            if not DontAdd then
              dim qID
              set qID = Creator.GetObject(nil, "TIBSQL", "")
              qID.Transaction = T
              qID.SQL.Text = _
                "SELECT " & _
                "GEN_ID(gd_g_unique, 1) + GEN_ID(gd_g_offset, 0) AS NewID " & _
                "FROM RDB$DATABASE "
        
              ' 1) Ед.Изм
              ' ищем РУИД ед.изм. на складе
              dim LocalValueKey, ValueName, ValueDescription, ValueIsPack , ValueKey
              qLocal.Close
              qLocal.SQL.Text = _
                "SELECT g.VALUEKEY, v.NAME, v.DESCRIPTION, v.ISPACK , r.XID, r.DBID, " & _
                "  r2.XID AS GXID, r2.DBID AS GDBID, gv.VALUEKEY AS GValuekey, " & _
                "  v2.NAME AS GNAME, v2.DESCRIPTION as GDESCRIPTION, v2.ISPACK AS GISPACK " &_
                "FROM GD_GOOD g " & _
                "JOIN GD_VALUE v ON v.ID = g.VALUEKEY " & _
                "   LEFT JOIN GD_GOODVALUE gv ON g.ID = gv.GOODKEY " & _
                "LEFT JOIN GD_VALUE v2 ON v2.ID = gv.VALUEKEY " & _
                "LEFT JOIN USR$PFD_GET_RUID(v.ID) r ON 1 = 1 " & _
                "LEFT JOIN USR$PFD_GET_RUID(v2.ID) r2 ON 1 = 1 " & _
                "WHERE g.ID = :LocalGoodKey "
              qLocal.ParamByName("LocalGoodKey").AsInteger = LocalGoodKey
              qLocal.ExecQuery
        
              LocalValueKey = qLocal.FieldByName("VALUEKEY").AsInteger
              ValueName = qLocal.FieldByName("NAME").AsString
              ValueDescription = qLocal.FieldByName("DESCRIPTION").AsVariant
              ValueIsPack = qLocal.FieldByName("ISPACK").AsVariant
        
              XID = qLocal.FieldByName("XID").AsInteger
              DBID = qLocal.FieldByName("DBID").AsInteger
        
              if (XID <= 0) or (DBID <= 0) then
                Exit Function
              end if
        
              ' нестандартная ед. изм
              if DBID <> 17 then
                ' ищем ее РУИД на базе кассового сервера
                q.Close
                q.SQL.Text = _
                  "SELECT FIRST 1 v.ID " & _
                  "FROM GD_RUID r " & _
                  "JOIN GD_VALUE v ON v.ID = r.ID " & _
                  "WHERE r.XID = :XID AND r.DBID = :DBID "
                q.ParamByName("XID").AsInteger = XID
                q.ParamByName("DBID").AsInteger = DBID
                q.ExecQuery
        
                if not q.EoF then
                  ValueKey = q.FieldByName("ID").AsInteger
                else
                  ' получаем ИД
                  qID.Close
                  qID.ExecQuery
                  ValueKey = qId.FieldByName("NewID").AsInteger
        
                  ' не нашли - вставляем ед. изм
                  q.Close
                  q.SQL.Text = "INSERT INTO GD_VALUE(ID, NAME, DESCRIPTION, ISPACK) VALUES (:ID, :NAME, :DESCRIPTION, :ISPACK) "
                  q.ParamByName("ID").AsInteger = ValueKey
                  q.ParamByName("NAME").AsString = ValueName
                  q.ParamByName("DESCRIPTION").AsVariant = ValueDescription
                  q.ParamByName("ISPACK").AsVariant = ValueIsPack
                  q.ExecQuery
        
                  ' вставляем ее РУИД
                  qInsRuid.Close
                  qInsRuid.ParamByName("ObjectKey").AsInteger = ValueKey
                  qInsRuid.ParamByName("XID").AsInteger = XID
                  qInsRuid.ParamByName("DBID").AsInteger = DBID
                  qInsRuid.ExecQuery
        
                 ' call pfd_FindOrAddGood_InsLog(qID, qLog, qFindLog, qCash, qFindCash, "GD_VALUE", XID & "_" & DBID, ValueKey)
                 end if
        
              else
                ValueKey = XID
              end if
        
              dim GLocalValueKey, GValueName, GValueDescription, GValueIsPack, GValueKey
              GLocalValueKey = qLocal.FieldByName("GVALUEKEY").AsInteger
              GValueName = qLocal.FieldByName("GNAME").AsString
              GValueDescription = qLocal.FieldByName("GDESCRIPTION").AsVariant
              GValueIsPack = qLocal.FieldByName("GISPACK").AsVariant
        
              XID = qLocal.FieldByName("GXID").AsInteger
              DBID = qLocal.FieldByName("GDBID").AsInteger
        
              if (XID > 0) and (DBID > 0) then
        '        Exit Function
        
        
              ' нестандартная ед. изм
              if DBID <> 17  then
                ' ищем ее РУИД на базе кассового сервера
                q.Close
                q.SQL.Text = _
                  "SELECT FIRST 1 v.ID " & _
                  "FROM GD_RUID r " & _
                  "JOIN GD_VALUE v ON v.ID = r.ID " & _
                  "WHERE r.XID = :XID AND r.DBID = :DBID "
                q.ParamByName("XID").AsInteger = XID
                q.ParamByName("DBID").AsInteger = DBID
                q.ExecQuery
        
                if not q.EoF then
                  GValueKey = q.FieldByName("ID").AsInteger
                else
                  ' получаем ИД
                  qID.Close
                  qID.ExecQuery
                  GValueKey = qId.FieldByName("NewID").AsInteger
        
                  ' не нашли - вставляем ед. изм
                  q.Close
                  q.SQL.Text = "INSERT INTO GD_VALUE(ID, NAME, DESCRIPTION, ISPACK) VALUES (:ID, :NAME, :DESCRIPTION, :ISPACK) "
                  q.ParamByName("ID").AsInteger = GValueKey
                  q.ParamByName("NAME").AsString = GValueName
                  q.ParamByName("DESCRIPTION").AsVariant = GValueDescription
                  q.ParamByName("ISPACK").AsVariant = GValueIsPack
                  q.ExecQuery
        
                  ' вставляем ее РУИД
                  qInsRuid.Close
                  qInsRuid.ParamByName("ObjectKey").AsInteger = GValueKey
                  qInsRuid.ParamByName("XID").AsInteger = XID
                  qInsRuid.ParamByName("DBID").AsInteger = DBID
                  qInsRuid.ExecQuery
        
                 ' call pfd_FindOrAddGood_InsLog(qID, qLog, qFindLog, qCash, qFindCash, "GD_VALUE", XID & "_" & DBID, ValueKey)
        
                end if
              else
                GValueKey = XID
              end if
              end if
        
              '2) группа ТМЦ
              dim qG
              set qG = Creator.GetObject(nil, "TIBSQL", "")
              qG.Transaction = T
              qG.SQL.Text = "INSERT INTO GD_GOODGROUP(ID, PARENT, NAME, ALIAS) VALUES (:ID, :PARENT, :NAME, :ALIAS) "
        
              ' все группы товара, начиная от родительской
              qLocal.Close
              qLocal.SQL.Text = _
                "SELECT " & _
                "  grP.LB, grP.ID, grP.NAME, grP.ALIAS, r.XID, r.DBID,  rP.XID AS PXID, rP.DBID AS PDBID " & _
                "FROM GD_GOOD g " & _
                "JOIN GD_GOODGROUP gr ON gr.ID = g.GROUPKEY " & _
                "JOIN GD_GOODGROUP grP ON grP.LB <= gr.LB AND grP.RB >= gr.RB " & _
                "LEFT JOIN USR$PFD_GET_RUID(grP.ID) r ON 1=1 " & _
                "LEFT JOIN USR$PFD_GET_RUID(grP.PARENT) rP ON 1=1 " & _
                "WHERE g.ID = :GoodKey " & _
                "ORDER BY grP.LB ASC "
        
              qLocal.ParamByName("GoodKey").AsInteger = LocalGoodKey
              qLocal.ExecQuery
        
              dim ToExit, GroupKey, TempGroupKey, TempXID, TempDBID, Parent
              ToExit = false
              TempGroupKey = -1
              TempXID = -1
              TempDBID = -1
              Parent = NULL
              ' ищем первую из родительских групп, которая есть на удаленной базе
              q.Close
              q.SQL.Text = _
                  "SELECT FIRST 1 g.ID " & _
                  "FROM GD_RUID r " & _
                  "JOIN GD_GOODGROUP g ON g.ID = r.ID " & _
                  "WHERE r.XID = :XID AND r.DBID = :DBID "
              while (not qLocal.EoF)
                XID = qLocal.FieldByName("XID").AsInteger
                DBID = qLocal.FieldByName("DBID").AsInteger
                if (XID <= 0) or (DBID <= 0) then Exit Function
        
                q.Close
                q.ParamByName("XID").AsInteger = XID
                q.ParamByName("DBID").AsInteger = DBID
                q.ExecQuery
        
                if q.EoF then
        
                  'генерировать ИД для группы
                  qID.Close
                  qID.ExecQuery
                  GroupKey = qId.FieldByName("NewID").AsInteger
        
                  qG.Close
                  qG.ParamByName("ID").AsInteger = GroupKey
                  qG.ParamByName("PARENT").AsVariant = Parent
                  qG.ParamByName("NAME").AsString = qLocal.FieldByName("NAME").AsString
                  qG.ParamByName("ALIAS").AsVariant = qLocal.FieldByName("ALIAS").AsVariant
                  qG.ExecQuery
        
                  ' РУИД для группы
                  qInsRuid.Close
                  qInsRuid.ParamByName("ObjectKey").AsInteger = GroupKey
                  qInsRuid.ParamByName("XID").AsInteger = XID
                  qInsRuid.ParamByName("DBID").AsInteger = DBID
                  qInsRuid.ExecQuery
        
                  Parent = GroupKey
        
                 ' call pfd_FindOrAddGood_InsLog(qID, qLog, qFindLog, qCash, qFindCash, "GD_GOODGROUP", XID & "_" & DBID, GroupKey)
        
                else
                  GroupKey = q.FieldByName("ID").AsInteger
                  Parent = q.FieldByName("ID").AsInteger
                end if
                qLocal.Next
              wend
        
              qLocal.Close
              qLocal.SQL.Text = _
                "SELECT g.ALIAS, g.BARCODE, g.SHORTNAME, g.NAME, g.USR$PF_ISWEIGHT, " & _
                "  g.USR$PF_WEIGHTCODE, g.USR$PF_ISFRAC, r.XID, r.DBID, g.USR$MAXDISCPERC, DESCRIPTION, G.USR$CONTENT " & _
                "FROM GD_GOOD g " & _
                "LEFT JOIN USR$PFD_GET_RUID(g.ID) r ON 1 = 1 " & _
                "WHERE g.ID = :GoodKey "
              qLocal.ParamByName("GoodKey").AsInteger = LocalGoodKey
              qLocal.ExecQuery
        
              XID = qLocal.FieldByName("XID").AsInteger
              DBID = qLocal.FieldByName("DBID").AsInteger
        
              'генерировать ИД для ТМЦ
              qID.Close
              qID.ExecQuery
              GoodKey = qId.FieldByName("NewID").AsInteger
        
              q.Close
              q.SQL.Text = _
                "INSERT INTO GD_GOOD(ID, NAME, BARCODE, ALIAS, " & _
                "   USR$PF_ISWEIGHT, USR$PF_WEIGHTCODE, USR$PF_ISFRAC, GROUPKEY, VALUEKEY, SHORTNAME, USR$MAXDISCPERC, DESCRIPTION, USR$CONTENT)" & _
                "VALUES (:ID, :NAME, :BARCODE, :ALIAS, " & _
                "   :USR$PF_ISWEIGHT, :USR$PF_WEIGHTCODE, :USR$PF_ISFRAC, :GROUPKEY, :VALUEKEY, :SHORTNAME, :USR$MAXDISCPERC, :DESCRIPTION, :USR$CONTENT)"
              q.ParamByName("ID").AsInteger = GoodKey
              q.ParamByName("GROUPKEY").AsInteger = GroupKey
              q.ParamByName("VALUEKEY").AsInteger = ValueKey
              q.ParamByName("NAME").AsString = qLocal.FieldByName("NAME").AsString
              q.ParamByName("ALIAS").AsVariant = qLocal.FieldByName("ALIAS").AsVariant
              q.ParamByName("BARCODE").AsVariant = qLocal.FieldByName("BARCODE").AsVariant
              q.ParamByName("USR$PF_ISWEIGHT").AsVariant = qLocal.FieldByName("USR$PF_ISWEIGHT").AsVariant
              q.ParamByName("USR$PF_WEIGHTCODE").AsVariant = qLocal.FieldByName("USR$PF_WEIGHTCODE").AsVariant
              q.ParamByName("USR$PF_ISFRAC").AsVariant = qLocal.FieldByName("USR$PF_ISFRAC").AsVariant
              q.ParamByName("SHORTNAME").AsString = qLocal.FieldByName("SHORTNAME").AsString
              q.ParamByName("USR$MAXDISCPERC").AsCurrency = qLocal.FieldByName("USR$MAXDISCPERC").AsCurrency
              q.ParamByName("DESCRIPTION").AsString = qLocal.FieldByName("DESCRIPTION").AsString
              q.ParamByName("USR$CONTENT").AsString = qLocal.FieldByName("USR$CONTENT").AsString
              q.ExecQuery
        
              ' РУИД для ТМЦ
              qInsRuid.Close
              qInsRuid.ParamByName("ObjectKey").AsInteger = GoodKey
              qInsRuid.ParamByName("XID").AsInteger = XID
              qInsRuid.ParamByName("DBID").AsInteger = DBID
              qInsRuid.ExecQuery
        
              'call pfd_FindOrAddGood_InsLog(qID, qLog, qFindLog, qCash, qFindCash, "GD_GOOD", XID & "_" & DBID, GoodKey)
        
            end if
          end if
        
          if GoodKey > 0 then
            ' штрихкоды
            dim qBarCode
            set qBarCode = Creator.GetObject(nil, "TIBSQL", "")
            qBarCode.Transaction = LT
            qBarCode.SQL.Text = _
              " SELECT BARCODE, USR$PF_TOCASH  " & _
              " FROM GD_GOODBARCODE  " & _
              " WHERE GOODKEY = :GoodKey  "
            qBarCode.ParamByName("GoodKey").AsInteger = LocalGoodKey
            qBarCode.ExecQuery
        
            dim qBarCodeIns
            set qBarCodeIns = Creator.GetObject(nil, "TIBSQL", "")
            qBarCodeIns.Transaction = T
            qBarCodeIns.SQL.Text = _
              " INSERT INTO  GD_GOODBARCODE(GOODKEY, BARCODE, USR$PF_TOCASH) " & _
              " VALUES(:GOODKEY, :BARCODE, :USR$PF_TOCASH)  "
        
            q.Close
            q.SQL.Text = _
              " SELECT ID  " & _
              " FROM GD_GOODBARCODE  " & _
              " WHERE GOODKEY = :GoodKey AND BARCODE = :Barcode "
        
            while not qBarCode.EoF
              q.Close
              q.ParamByName("GOODKEY").AsInteger = Goodkey
              q.ParamByName("BARCODE").AsString = qBarCode.FieldByName("BARCODE").AsString
              q.ExecQuery
              if q.EoF then
                qBarCodeIns.Close
                qBarCodeIns.ParamByName("GOODKEY").AsInteger = Goodkey
                qBarCodeIns.ParamByName("BARCODE").AsString = qBarCode.FieldByName("BARCODE").AsString
                qBarCodeIns.ParamByName("USR$PF_TOCASH").AsInteger = qBarCode.FieldByName("USR$PF_TOCASH").AsInteger
                qBarCodeIns.ExecQuery
              end if
              qBarCode.Next
            wend
        
            if GValuekey > 0 then
              ' ед.измерения ()
              dim qGoodValue
              set qGoodValue = Creator.GetObject(nil, "TIBSQL", "")
              qGoodValue.Transaction = LT
              qGoodValue.SQL.Text = _
                " SELECT VALUEKEY, SCALE, USR$BARCODE  " & _
                " FROM GD_GOODVALUE  " & _
                " WHERE GOODKEY = :GoodKey  "
              qGoodValue.ParamByName("GoodKey").AsInteger = LocalGoodKey
              qGoodValue.ExecQuery
        
              dim qGValueIns
              set qGValueIns = Creator.GetObject(nil, "TIBSQL", "")
              qGValueIns.Transaction = T
              qGValueIns.SQL.Text = _
                " INSERT INTO GD_GOODVALUE(GOODKEY, VALUEKEY, USR$BARCODE, SCALE) " & _
                " VALUES(:GOODKEY, :VALUEKEY, :BARCODE, :SCALE)  "
        
              q.Close
              q.SQL.Text = _
                " SELECT GOODKEY  " & _
                " FROM GD_GOODVALUE "  & _
                " WHERE GOODKEY = :GoodKey AND VALUEKEY = :ValueKey "
        
              while not qGoodValue.EoF
                q.Close
                q.ParamByName("GOODKEY").AsInteger = Goodkey
                q.ParamByName("VALUEKEY").AsString = qGoodValue.FieldByName("VALUEKEY").AsInteger
                q.ExecQuery
                if q.EoF then
                  qGValueIns.Close
                  qGValueIns.ParamByName("GOODKEY").AsInteger = Goodkey
                  qGValueIns.ParamByName("VALUEKEY").AsInteger = GValuekey
                  qGValueIns.ParamByName("BARCODE").AsString = qGoodValue.FieldByName("USR$BARCODE").AsString
                  qGValueIns.ParamByName("SCALE").AsCurrency = qGoodValue.FieldByName("SCALE").AsCurrency
                  qGValueIns.ExecQuery
                end if
                qGoodValue.Next
              wend
            end if
        
        
        
          end if
        
          if LT.InTransaction then LT.Commit
        
          if err.Number = 0 then
            pfd_FindOrAddGood = GoodKey
          end if
        
         ' on error goto 0
        end function
        
        sub pfd_FindOrAddGood_InsLog(qID, qLog, qFindLog, qCash, qFindCash, TableName, RUID, ID)
          qID.Close
          qLog.Close
          qFindLog.Close
          qFindCash.Close
        
          qFindLog.ParamByName("CN").AsString = TableName
          qFindLog.ExecQuery
        
          if not qFindLog.EoF then
            qID.ExecQUery
            dim LogKey
            LogKey = qID.FieldByName("NewID").AsInteger
        
            qLog.ParamByName("ID").AsInteger = LogKey
            qLog.ParamByName("USR$SUBTYPE").AsString = TableName
            qLog.ParamByName("USR$OBJECTRUID").AsString = RUID
            qLog.ParamByName("USR$OBJECTKEY").AsInteger = ID
            qLog.ParamByName("USR$OBJSYNCHRKEY").AsInteger = _
              qFindLog.FieldByName("ID").AsInteger
            qLog.ExecQuery
        
            qFindCash.ExecQuery
            while not qFindCash.EoF
              qCash.Close
              qCash.ParamByName("USR$LOGKEY").AsInteger = LogKey
              qCash.ParamByName("USR$CASHKEY").AsInteger = _
                qFindCash.FieldByName("ID").AsInteger
              qCash.ExecQuery
              qFindCash.Next
            wend
          end if
        end sub
        
        function Del_AddRuid(id, xID, dbId, Transaction)
          dim ibsqlInsRUID, ibsqlDelRUID
          set ibsqlInsRUID = Designer.CreateObject(nil, "TIBSQL", "")
          ibsqlInsRUID.Transaction = Transaction
          ibsqlInsRUID.SQL.Text = _
            "INSERT INTO gd_ruid(id, xid, dbid, modified, editorkey) VALUES (:ID, :XID, :DBID, 'now', 650002) "
        
          set ibsqlDelRUID = Designer.CreateObject(nil, "TIBSQL", "")
          ibsqlDelRUID.Transaction = Transaction
          ibsqlDelRUID.SQL.Text = _
            "DELETE FROM gd_ruid r where (xid = :xid and dbid = :dbid) or id = :id"
        
          ibsqlDelRUID.Close
          ibsqlDelRUID.ParamByName("id").AsInteger = id
          ibsqlDelRUID.ParamByName("xID").AsInteger = xid
          ibsqlDelRUID.ParamByName("dbID").AsInteger = dbid
          ibsqlDelRUID.ExecQuery
        
          ibsqlInsRUID.Close
          ibsqlInsRUID.ParamByName("id").AsInteger = id
          ibsqlInsRUID.ParamByName("xid").AsInteger = xid
          ibsqlInsRUID.ParamByName("dbid").AsInteger = dbid
          ibsqlInsRUID.ExecQuery
        
          Designer.DestroyObject(ibsqlDelRUID)
          Designer.DestroyObject(ibsqlInsRUID)
        end function
        
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147034573_918566284
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147032799_917536542
    Fields: 
      NAME: "pfd_FindGoodWithoutAdding"
      COMMENT: ~
      EVENT: ~
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "UNKNOWN"
      MODULECODE: "1010001_17 APPLICATION"
      OBJECTNAME: "APPLICATION"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: ~
      EDITIONDATE: 2008-01-10T23:01:25+03:00
      DISPLAYSCRIPT: | 
        PFD_FINDGOODWITHOUTADDING
        
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QMAAAATE9DQUxHT09ES0VZDAAAAExPQ0FMR09PREtFWQAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAABGTlNUUFJTVAEAAABUAQAAAFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARk5TVEZM
        UFI=
      SCRIPT: | 
        option explicit
        function pfd_FindGoodWithoutAdding(LocalGoodKey, T)
        
          dim GoodKey
          GoodKey = -1
        
          pfd_FindGoodWithoutAdding = GoodKey
          ' ищем на базе склада РУИД ТМЦ
          dim XID, DBID
          XID = -1
          DBID = -1
          call gdcBaseManager.GetFullRUIDByID(LocalGoodKey, XID, DBID)
          if (XID <= 0) or (DBID <= 0) then
            Exit Function
          end if
        
          ' ищем на базе кассового сервера этот товар по РУИДу
          dim Creator, q
          set Creator = new TCreator
          set q = Creator.GetObject(nil, "TIBSQL", "")
          q.Transaction = T
          q.SQL.Text = _
            "SELECT FIRST 1 g.ID " & _
            "FROM GD_RUID r " & _
            "JOIN GD_GOOD g ON g.ID = r.ID " & _
            "WHERE r.XID = :XID AND r.DBID = :DBID "
          q.ParamByName("XID").AsInteger = XID
          q.ParamByName("DBID").AsInteger = DBID
          q.ExecQuery
          if not q.EoF then
            GoodKey = q.FieldByName("ID").AsInteger
          end if
          q.Close
        
          if GoodKey > - 1 then
            pfd_FindGoodWithoutAdding = GoodKey
          end if
        
        end function
        
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147032799_917536542
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "pfd_ExportFromDepotInServer"
      COMMENT: ~
      EVENT: ~
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "UNKNOWN"
      MODULECODE: "1010001_17 APPLICATION"
      OBJECTNAME: "APPLICATION"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: ~
      EDITIONDATE: 2023-04-10T16:00:30+03:00
      DISPLAYSCRIPT: | 
        PFD_EXPORTFROMDEPOTINSERVER
        PFD_EXPORTFROMDEPOTINSERVER_EXC
        PFD_EXPORTFROMDEPOTINSERVER_GETCLAUSES
        
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAREVQS0VZBgAAAERFUEtFWQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        UFJTVAIAAABJRAIAAABJRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNUUFJTVAcAAABET0NU
        WVBFBwAAAERPQ1RZUEUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARk5TVFBSU1QHAAAARU5EREFU
        RQcAAABFTkREQVRFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZOU1RQUlNUBAAAAEdEQ08EAAAA
        R0RDTwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNUUFJTVAkAAABJU1RXT0RFUFQJAAAASVNU
        V09ERVBUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZOU1RGTFBS
      SCRIPT: | 
        '#include PFD_FINDORADDGOOD
        '#include PFD_FINDGOODWITHOUTADDING
        '#include PFD_SYNCDEPOT
        Option Explicit
        Function pfd_ExportFromDepotInServer(DepKey, ID, DocType, EndDate, gdcO, isTwoDept)
          Dim sWherePart
          dim Cstl
          Cstl = false
          sWherePart = " AND COALESCE(bline.USR$ISSPEND, 0) = 1 "
          
          If Assigned(gdcO) Then
            If gdcO.FieldByName("USR$PFD_DELIVERED").AsInteger = 1 Then
              Dim res
              res = Application.MessageBox("Накладная уже экспортирована!" & vbCrLf & _
                                           "Нажмите " & """Да""" & ", чтобы экспортировать только новые(измененные) позиции, " & """Нет""" & "для экспорта всей накладной или " & """Отмена""" & " для отмены операции", _
                                           "Внимание", _
                                           vbYesNoCancel + vbSystemModal + vbQuestion)
              Select Case res
              Case vbYes
                sWherePart = " AND (COALESCE(bline.USR$ISSPEND, 0) = 1 AND COALESCE(bline.USR$ISEXPORT,0) = 0) "
              Case vbNo
        '        sWherePart = " AND COALESCE(bline.USR$ISSPEND, 0) = 1 "
              Case vbCancel
                Exit Function
              End Select
                                           
        
            End If
            '09. Переоценка товаров
            If DocType = gdcBaseManager.GetIDByRUIDString("147013048_109092844") Then
              If gdcO.FieldByName("BillDelivered").AsInteger = 1 Then
                  Call Application.MessageBox("Накладная, привязанная к док-ту переоценки, уже экспортирована!", "Внимание", vbSystemModal + mb_IconError)
                Exit Function
              End If
            End If
          End If
        
          Dim Creator, Transaction, Database, OurTransaction
          
          Set Creator = New TCreator
          
          Dim qParams, Params
          'Путь к кассовому серверу
          Set qParams = Creator.GetObject(nil, "TIBSQL", "")
          qParams.Transaction = gdcBaseManager.ReadTransaction
          qParams.SQL.Text = _
            " SELECT USR$DEPOTKEY, USR$PATH " & _
            " FROM USR$SERVERDEP " & _
            " WHERE USR$DEPOTKEY = :depkey AND COALESCE(USR$DISABLED, 0) = 0 "
          qParams.ParamByName("depkey").AsInteger = DepKey
          qParams.ExecQuery
        
          Set Transaction = Creator.GetObject(nil, "TIBTransaction", "")
          Transaction.Params.Add("nowait")
          Set Database = Creator.GetObject(nil, "TIBDatabase", "")
          If qParams.EoF Then
            If Not pf_Silent Then
              Call Application.MessageBox("Выбранное подразделение не связано с кассовым сервером!", "Внимание", vbSystemModal + mb_IconError)
            End If
            Exit Function
          End If
        
          'Путь к базе
          Database.DatabaseName = qParams.FieldByName("USR$PATH").AsString
          Database.DefaultTransaction = Transaction
          Database.Params.Add("user_name=SYSDBA")
          Database.Params.Add("password=masterkey")
          Database.Params.Add("lc_ctype=win1251")
          Database.LoginPrompt = False
          If Not Database.Connected Then
            ON ERROR RESUME NEXT
              Database.Open
              If Err.Description <> "" Then
                If Not pf_Silent Then
                  Call Application.MessageBox(Err.Description, "Внимание!", vbSystemModal + vbCritical)
                End If
                Exit Function
              End If
            ON ERROR GOTO 0
          End If
        
          Dim SelectPart, FromPart, GroupPart, FeatureNamesArr, AllPart
          AllPart = pfd_ExportFromDepotInServer_GetClauses(Creator, (DocType = 0))
          SelectPart = AllPart(0)
          FromPart = AllPart(1)
          GroupPart = AllPart(2)
          FeatureNamesArr = Split(AllPart(3), ";")
        
          ' Накладные
          Dim sqlGoodBill
          Set sqlGoodBill = Creator.GetObject(nil, "TIBSQL", "")
          sqlGoodBill.Transaction = gdcBaseManager.ReadTransaction
        
          'If DocType = gdcBaseManager.GetIDByRUIDString("147010993_109092844") Then
        '  Dim isTwoDept
        '  isTwoDept = False
          
          Set OurTransaction = Creator.GetObject(nil, "TIBTransaction", "")
          OurTransaction.DefaultDatabase = gdcBaseManager.Database
          If Not OurTransaction.InTransaction Then OurTransaction.StartTransaction
          
          Dim sTableName, qIsExp
          Set qIsExp = Creator.GetObject(Null, "TIBSQL", "")
          qIsExp.Transaction = OurTransaction
          
          Select Case DocType
          Case gdcBaseManager.GetIDByRUIDString("147010993_109092844"), gdcBaseManager.GetIDByRUIDString("147037882_26077578")
          '01. Накладная на получение товара, 01. Накладная на получение импортного товара
            sqlGoodBill.SQL.Text = _
              "SELECT " & _
              "  bill.USR$DEPTKEY AS CONID, " & _
              "  g.ID, " & _
              "  g.ALIAS, " & _
              "  g.NAME, " & _
              "  g.USR$PF_ISWEIGHT, " & _
              "  c.USR$PFD_BARCODE AS BARCODE , " & _
              "  g.USR$PF_ISFRAC, " & _
              "  c.USR$INV_COSTRETAILNCU, " & _
              "  (C.USR$INV_COSTBUYNCU + C.USR$INV_BUYNDSNCU) AS COST, " & _
              "  v.NAME AS ValueName, " & _
              "  c.USR$INV_EXPIRYDATE, c.USR$INV_DATEMAKING, " & _
              "  bline.QUANTITY " & _
              SelectPart & _
              " FROM USR$INV_ADDWBILL bill " & _
              "  LEFT JOIN GD_DOCUMENT d ON bill.DOCUMENTKEY = d.ID " & _
              "  LEFT JOIN USR$INV_ADDWBILLLINE bline ON bill.DOCUMENTKEY = bline.MASTERKEY " & _
              "  LEFT JOIN INV_CARD c ON c.ID = bline.FROMCARDKEY " & _
              "  LEFT JOIN GD_GOOD g ON g.ID = c.GOODKEY " & _
              "  LEFT JOIN GD_VALUE v ON g.VALUEKEY = v.ID " & _
              FromPart & _
              "WHERE bill.DOCUMENTKEY = :dockey " & _
              sWherePart
              
              sTableName = "USR$INV_ADDWBILLLINE"
            
          Case gdcBaseManager.GetIDByRUIDString("147013026_109092844")
          '02. Внутреннее перемещение товаров
        '    isTwoDept = True
            
            sqlGoodBill.SQL.Text = _
              "SELECT " & _
              "  CASE " & _
              "    WHEN COALESCE(bill.USR$FROMCONTACTKEY, 0) = :DepKey THEN bill.USR$FROMCONTACTKEY " & _
              "    WHEN COALESCE(bill.USR$TOCONTACTKEY, 0) = :DepKey THEN bill.USR$TOCONTACTKEY " & _
              "  END AS CONID, " & _
              "  g.ID, " & _
              "  g.ALIAS, " & _
              "  g.NAME, " & _
              "  g.USR$PF_ISWEIGHT, " & _
              "  c.USR$PFD_BARCODE AS BARCODE , " & _
              "  g.USR$PF_ISFRAC, " & _
              "  c.USR$INV_COSTRETAILNCU, " & _
              "  (C.USR$INV_COSTBUYNCU + C.USR$INV_BUYNDSNCU) AS COST, " & _
              "  v.NAME AS ValueName, " & _
              "  CASE " & _
              "    WHEN COALESCE(bill.USR$FROMCONTACTKEY, 0) = :DepKey THEN -bline.QUANTITY " & _
              "    WHEN COALESCE(bill.USR$TOCONTACTKEY, 0) = :DepKey THEN bline.QUANTITY " & _
              "  END AS QUANTITY " & _
              SelectPart & _
              " FROM USR$INV_INVMOVE bill " & _
              "  LEFT JOIN GD_DOCUMENT d ON bill.DOCUMENTKEY = d.ID " & _
              "  LEFT JOIN USR$INV_INVMOVELINE bline ON bill.DOCUMENTKEY = bline.MASTERKEY " & _
              "  LEFT JOIN INV_CARD c ON c.ID = bline.FROMCARDKEY " & _
              "  LEFT JOIN GD_GOOD g ON g.ID = c.GOODKEY " & _
              "  LEFT JOIN GD_VALUE v ON g.VALUEKEY = v.ID " & _
              FromPart & _
              "WHERE bill.DOCUMENTKEY = :dockey " & _
              sWherePart
              
              sTableName = "USR$INV_INVMOVELINE"
        
          Case gdcBaseManager.GetIDByRUIDString("147013033_109092844"), _
               gdcBaseManager.GetIDByRUIDString("147022442_63934951"), _
               gdcBaseManager.GetIDByRUIDString("147037882_26077578")
          '03. Отпуск товара на сторону (оптовая торговля),
          '03. Отпуск товара на сторону (розничная торговля),
          '03. Отпуск товара на экспорт (оптовая торговля)
            sqlGoodBill.SQL.Text = _
              "SELECT " & _
              "  bill.USR$MAINDEPOTKEY AS CONID, " & _
              "  g.ID, " & _
              "  g.ALIAS, " & _
              "  g.NAME, " & _
              "  g.USR$PF_ISWEIGHT, " & _
              "  c.USR$PFD_BARCODE AS BARCODE , " & _
              "  g.USR$PF_ISFRAC, " & _
              "  c.USR$INV_COSTRETAILNCU, " & _
              "  (C.USR$INV_COSTBUYNCU + C.USR$INV_BUYNDSNCU) AS COST, " & _
              "  v.NAME AS ValueName, " & _
              "  -bline.QUANTITY AS QUANTITY " & _
              SelectPart & _
              " FROM USR$INV_SELLBILL bill " & _
              "  LEFT JOIN GD_DOCUMENT d ON bill.DOCUMENTKEY = d.ID " & _
              "  LEFT JOIN USR$INV_SELLBILLLINE bline ON bill.DOCUMENTKEY = bline.MASTERKEY " & _
              "  LEFT JOIN INV_CARD c ON c.ID = bline.FROMCARDKEY " & _
              "  LEFT JOIN GD_GOOD g ON g.ID = c.GOODKEY " & _
              "  LEFT JOIN GD_VALUE v ON g.VALUEKEY = v.ID " & _
              FromPart & _
              "WHERE bill.DOCUMENTKEY = :dockey " & _
              sWherePart
              
              sTableName = "USR$INV_SELLBILLLINE"
              
          Case gdcBaseManager.GetIDByRUIDString("147005934_63934951")
          '06. Выдача в торговые подразделения
          'ElseIf DocType = gdcBaseManager.GetIDByRUIDString("147005934_63934951") Then
        '    isTwoDept = True
            sqlGoodBill.SQL.Text = _
              "SELECT " & _
              "  CASE " & _
              "    WHEN COALESCE(bill.USR$MAINDEPOTKEY, 0) = :DepKey THEN bill.USR$MAINDEPOTKEY " & _
              "    WHEN COALESCE(bill.USR$CONTACTKEY, 0) = :DepKey THEN bill.USR$CONTACTKEY " & _
              "  END AS CONID, " & _
              "  g.ID, " & _
              "  g.ALIAS, " & _
              "  g.NAME, " & _
              "  g.USR$PF_ISWEIGHT, " & _
              "  c.USR$PFD_BARCODE AS BARCODE , " & _
              "  g.USR$PF_ISFRAC, " & _
              "  CASE " & _
              "    WHEN COALESCE(bill.USR$MAINDEPOTKEY, 0) = :DepKey THEN c.USR$INV_COSTRETAILNCU " & _
              "    WHEN COALESCE(bill.USR$CONTACTKEY, 0) = :DepKey THEN cc.USR$INV_COSTRETAILNCU " & _
              "  END AS USR$INV_COSTRETAILNCU, " & _
              "  CASE " & _
              "    WHEN COALESCE(bill.USR$MAINDEPOTKEY, 0) = :DepKey THEN (C.USR$INV_COSTBUYNCU + C.USR$INV_BUYNDSNCU) " & _
              "    WHEN COALESCE(bill.USR$CONTACTKEY, 0) = :DepKey THEN (CC.USR$INV_COSTBUYNCU + CC.USR$INV_BUYNDSNCU) " & _
              "  END AS COST, " & _
              "  v.NAME AS ValueName, " & _
              "  CASE " & _
              "    WHEN COALESCE(bill.USR$MAINDEPOTKEY, 0) = :DepKey THEN -bline.QUANTITY " & _
              "    WHEN COALESCE(bill.USR$CONTACTKEY, 0) = :DepKey THEN bline.QUANTITY " & _
              "  END AS QUANTITY " & _
              SelectPart & _
              " FROM USR$INV_TOTRADE bill " & _
              "  LEFT JOIN GD_DOCUMENT d ON bill.DOCUMENTKEY = d.ID " & _
              "  LEFT JOIN USR$INV_TOTRADELINE bline ON bill.DOCUMENTKEY = bline.MASTERKEY " & _
              "  LEFT JOIN INV_CARD c ON c.ID = bline.FROMCARDKEY " & _
              "  LEFT JOIN INV_CARD cc ON cc.ID = bline.TOCARDKEY " & _
              "  LEFT JOIN GD_GOOD g ON g.ID = c.GOODKEY " & _
              "  LEFT JOIN GD_VALUE v ON g.VALUEKEY = v.ID " & _
              FromPart & _
              "WHERE bill.DOCUMENTKEY = :dockey " & _
              sWherePart
              
              sTableName = "USR$INV_TOTRADELINE"
          'ElseIf DocType = gdcBaseManager.GetIDByRUIDString("147013048_109092844") Then
          
          Case gdcBaseManager.GetIDByRUIDString("147006209_63934951")
          '06а. Возврат с торговых подразделений
        '    isTwoDept = True
            sqlGoodBill.SQL.Text = _
              "SELECT " & _
              "  CASE " & _
              "    WHEN COALESCE(bill.USR$MAINDEPOTKEY, 0) = :DepKey THEN bill.USR$MAINDEPOTKEY " & _
              "    WHEN COALESCE(bill.USR$CONTACTKEY, 0) = :DepKey THEN bill.USR$CONTACTKEY " & _
              "  END AS CONID, " & _
              "  g.ID, " & _
              "  g.ALIAS, " & _
              "  g.NAME, " & _
              "  g.USR$PF_ISWEIGHT, " & _
              "  c.USR$PFD_BARCODE AS BARCODE , " & _
              "  g.USR$PF_ISFRAC, " & _
              "  CASE " & _
              "    WHEN COALESCE(bill.USR$MAINDEPOTKEY, 0) = :DepKey THEN c.USR$INV_COSTRETAILNCU " & _
              "    WHEN COALESCE(bill.USR$CONTACTKEY, 0) = :DepKey THEN cc.USR$INV_COSTRETAILNCU " & _
              "  END AS USR$INV_COSTRETAILNCU, " & _
              "  CASE " & _
              "    WHEN COALESCE(bill.USR$MAINDEPOTKEY, 0) = :DepKey THEN (C.USR$INV_COSTBUYNCU + C.USR$INV_BUYNDSNCU) " & _
              "    WHEN COALESCE(bill.USR$CONTACTKEY, 0) = :DepKey THEN (CC.USR$INV_COSTBUYNCU + CC.USR$INV_BUYNDSNCU) " & _
              "  END AS COST, " & _
              "  v.NAME AS ValueName, " & _
              "  CASE " & _
              "    WHEN COALESCE(bill.USR$MAINDEPOTKEY, 0) = :DepKey THEN bline.QUANTITY " & _
              "    WHEN COALESCE(bill.USR$CONTACTKEY, 0) = :DepKey THEN -bline.QUANTITY " & _
              "  END AS QUANTITY " & _
              SelectPart & _
              " FROM USR$INV_TOTRADE bill " & _
              "  LEFT JOIN GD_DOCUMENT d ON bill.DOCUMENTKEY = d.ID " & _
              "  LEFT JOIN USR$INV_TOTRADELINE bline ON bill.DOCUMENTKEY = bline.MASTERKEY " & _
              "  LEFT JOIN INV_CARD c ON c.ID = bline.TOCARDKEY " & _
              "  LEFT JOIN INV_CARD cc ON cc.ID = bline.FROMCARDKEY " & _
              "  LEFT JOIN GD_GOOD g ON g.ID = c.GOODKEY " & _
              "  LEFT JOIN GD_VALUE v ON g.VALUEKEY = v.ID " & _
              FromPart & _
              "WHERE bill.DOCUMENTKEY = :dockey " & _
              sWherePart
              
              sTableName = "USR$INV_TOTRADELINE"
              
          Case gdcBaseManager.GetIDByRUIDString("147013038_109092844"), _
               gdcBaseManager.GetIDByRUIDString("147117582_341726109")
          '07. Возврат товаров поставщику,
          '07. Возврат поставщику импортного товара
            sqlGoodBill.SQL.Text = _
              "SELECT " & _
              "  bill.USR$MAINDEPOTKEY AS CONID, " & _
              "  g.ID, " & _
              "  g.ALIAS, " & _
              "  g.NAME, " & _
              "  g.USR$PF_ISWEIGHT, " & _
              "  c.USR$PFD_BARCODE AS BARCODE , " & _
              "  g.USR$PF_ISFRAC, " & _
              "  c.USR$INV_COSTRETAILNCU, " & _
              "  (C.USR$INV_COSTBUYNCU + C.USR$INV_BUYNDSNCU) AS COST, " & _
              "  v.NAME AS ValueName, " & _
              "  -bline.QUANTITY AS QUANTITY " & _
               SelectPart & _
              " FROM USR$INV_RETPROV bill " & _
              "  LEFT JOIN GD_DOCUMENT d ON bill.DOCUMENTKEY = d.ID " & _
              "  LEFT JOIN USR$INV_RETPROVLINE bline ON bill.DOCUMENTKEY = bline.MASTERKEY " & _
              "  LEFT JOIN INV_CARD c ON c.ID = bline.FROMCARDKEY " & _
              "  LEFT JOIN GD_GOOD g ON g.ID = c.GOODKEY " & _
              "  LEFT JOIN GD_VALUE v ON g.VALUEKEY = v.ID " & _
              FromPart & _
              "WHERE bill.DOCUMENTKEY = :dockey " & _
              sWherePart
              
              sTableName = "USR$INV_RETPROVLINE"
        
          Case gdcBaseManager.GetIDByRUIDString("147013043_109092844")
          '08. Списание товаров
            sqlGoodBill.SQL.Text = _
              "SELECT " & _
              "  bill.USR$DEPTKEY AS CONID, " & _
              "  g.ID, " & _
              "  g.ALIAS, " & _
              "  g.NAME, " & _
              "  g.USR$PF_ISWEIGHT, " & _
              "  c.USR$PFD_BARCODE AS BARCODE , " & _
              "  g.USR$PF_ISFRAC, " & _
              "  c.USR$INV_COSTRETAILNCU, " & _
              "  (C.USR$INV_COSTBUYNCU + C.USR$INV_BUYNDSNCU) AS COST, " & _
              "  v.NAME AS ValueName, " & _
              "  -bline.QUANTITY AS QUANTITY " & _
              SelectPart & _
              " FROM USR$INV_SPEND bill " & _
              "  LEFT JOIN GD_DOCUMENT d ON bill.DOCUMENTKEY = d.ID " & _
              "  LEFT JOIN USR$INV_SPENDLINE bline ON bill.DOCUMENTKEY = bline.MASTERKEY " & _
              "  LEFT JOIN INV_CARD c ON c.ID = bline.FROMCARDKEY " & _
              "  LEFT JOIN GD_GOOD g ON g.ID = c.GOODKEY " & _
              "  LEFT JOIN GD_VALUE v ON g.VALUEKEY = v.ID " & _
              FromPart & _
              "WHERE bill.DOCUMENTKEY = :dockey " & _
              sWherePart
              
              sTableName = "USR$INV_SPENDLINE"
        
          Case gdcBaseManager.GetIDByRUIDString("147013048_109092844")
          '09. Переоценка товаров
            sqlGoodBill.SQL.Text = _
               "SELECT " & _
               "  bill.USR$DEPTKEY AS CONID, " & _
               "  g.ID, " & _
               "  g.ALIAS, " & _
               "  g.NAME, " & _
               "  g.USR$PF_ISWEIGHT, " & _
               "  c.USR$PFD_BARCODE AS BARCODE, " & _
               "  g.USR$PF_ISFRAC, " & _
               "  c.USR$INV_COSTRETAILNCU, " & _
               "  (c.USR$INV_COSTBUYNCU+c.USR$INV_BUYNDSNCU) as Cost, " & _
               "  v.NAME AS ValueName, " & _
               "  c.USR$INV_EXPIRYDATE, c.USR$INV_DATEMAKING, " & _
               "  /*bline.QUANTITY*/ 0 AS QUANTITY " & _
               SelectPart & _
               " FROM USR$INV_NEWCOST bill " & _
               "  LEFT JOIN GD_DOCUMENT d ON bill.DOCUMENTKEY = d.ID " & _
               "  LEFT JOIN USR$INV_NEWCOSTLINE bline ON bill.DOCUMENTKEY = bline.MASTERKEY " & _
               "  LEFT JOIN INV_CARD c ON c.ID = bline.TOCARDKEY " & _
               "  LEFT JOIN GD_GOOD g ON g.ID = c.GOODKEY " & _
               "  LEFT JOIN GD_VALUE v ON g.VALUEKEY = v.ID " & _
               FromPart & _
               "WHERE bill.DOCUMENTKEY = :dockey " & _
              sWherePart
               
               sTableName = "USR$INV_NEWCOSTLINE"
          Case 0
          ' Если остатки
          'ElseIf DocType = 0 Then
          
          ' если нужно передать только весовой товар у которого есть сроки годности
          'добавлю костыль для разового использования Cstl = True
            dim  OnlyWeight
            Cstl = false ' Cstl = True
            if Cstl Then
              OnlyWeight = " and COALESCE(g.USR$PF_ISWEIGHT,0) =1  and (not c.USR$INV_EXPIRYDATE is null or not  c.USR$INV_DATEMAKING is null) "
            end if
            sqlGoodBill.SQL.Text = _
              "SELECT " & _
              "  m.CONTACTKEY AS CONID, " & _
              "  g.ID, " & _
              "  g.ALIAS, " & _
              "  g.NAME, " & _
              "  g.USR$PF_ISWEIGHT, " & _
              "  c.USR$PFD_BARCODE AS BARCODE, " & _
              "  g.USR$PF_ISFRAC, " & _
              "  MAX(c.USR$INV_COSTRETAILNCU) AS USR$INV_COSTRETAILNCU, " & _
              "  MAX(c.USR$INV_COSTBUYNCU+c.USR$INV_BUYNDSNCU) as Cost, " & _
              "  v.NAME AS VALUENAME, c.USR$INV_EXPIRYDATE, c.USR$INV_DATEMAKING, " & _
              "  SUM(m.BALANCE) as QUANTITY " & _
              SelectPart & _
              " FROM  (" & _
              "          SELECT " & _
              "            m.CARDKEY, " & _
              "            m.CONTACTKEY, " & _
              "            SUM ( m.BALANCE ) AS BALANCE " & _
              "          FROM INV_BALANCE m " & _
              "          JOIN GD_CONTACT con ON m.CONTACTKEY  =  con.ID AND con.LB  >=  :LB AND con.RB  <=  :RB " & _
              "          WHERE m.BALANCE  <>  0 " & _
              "          GROUP BY 1,2 " & _
              " " & _
              "          UNION ALL " & _
              " " & _
              "          SELECT " & _
              "            m.CARDKEY, " & _
              "            m.CONTACTKEY, " & _
              "            SUM ( m.CREDIT - m.DEBIT ) AS BALANCE " & _
              "          FROM INV_MOVEMENT m " & _
              "          JOIN GD_CONTACT con ON m.CONTACTKEY  =  con.ID AND con.LB  >=  :LB AND con.RB  <=  :RB " & _
              "          WHERE m.DISABLED = 0 " & _
              "            AND m.MOVEMENTDATE  >  :EndDate " & _
              "          GROUP BY 1, 2) m "  & _
              "  LEFT JOIN INV_CARD c ON c.ID = m.CARDKEY " & _
              "  LEFT JOIN GD_GOOD g ON g.ID = c.GOODKEY " & _
              "  LEFT JOIN GD_VALUE v ON g.VALUEKEY = v.ID " & _
              FromPart & _
              " WHERE m.BALANCE  <>  0 " & _
              OnlyWeight & _
              "  AND c.COMPANYKEY = <COMPANYKEY/> " & _
              "GROUP BY m.CONTACTKEY, g.ID, g.ALIAS , g.NAME, g.USR$PF_ISWEIGHT, " & _
              "  BARCODE, g.USR$PF_ISFRAC, v.NAME, C.USR$INV_COSTRETAILNCU , C.USR$INV_COSTRETAILNCU, c.USR$INV_EXPIRYDATE, c.USR$INV_DATEMAKING  " & GroupPart & _
              "HAVING SUM(m.BALANCE) > 0 "
          'End If
        
          Case gdcBaseManager.GetIDByRUIDString("299408909_2076379983")
          '15. Акт преобразования
            sqlGoodBill.SQL.Text = _
              "SELECT " & _
              "  bill.USR$FROMCONTACTKEY AS CONID, " & _
              "  g.ID, " & _
              "  g.ALIAS, " & _
              "  g.NAME, " & _
              "  g.USR$PF_ISWEIGHT, " & _
              "  c.USR$PFD_BARCODE AS BARCODE, " & _
              "  g.USR$PF_ISFRAC, " & _
              "  c.USR$INV_COSTRETAILNCU, " & _
              "  (C.USR$INV_COSTBUYNCU + C.USR$INV_BUYNDSNCU) as Cost, " & _
              "  v.NAME AS ValueName, " & _
              "   c.USR$INV_EXPIRYDATE, c.USR$INV_DATEMAKING, " & _
              "  bline.TOQUANTITY AS QUANTITY " & _
              SelectPart & _
              " FROM USR$INV_ACTWORK bill " & _
              "  LEFT JOIN GD_DOCUMENT d ON bill.DOCUMENTKEY = d.ID " & _
              "  LEFT JOIN USR$INV_ACTWORKLINE bline ON bill.DOCUMENTKEY = bline.MASTERKEY " & _
              "  LEFT JOIN INV_CARD c ON c.ID = bline.FROMCARDKEY " & _
              "  LEFT JOIN GD_GOOD g ON g.ID = c.GOODKEY " & _
              "  LEFT JOIN GD_VALUE v ON g.VALUEKEY = v.ID " & _
              FromPart & _
              "WHERE bill.DOCUMENTKEY = :dockey " & _
              "and bline.INQUANTITY>0 "
              sWherePart
        
              sTableName = "USR$INV_ACTWORKLINE"
        
        
        
        
          Case gdcBaseManager.GetIDByRUIDString("147013054_109092844")
          'Инвентаризация
            sqlGoodBill.SQL.Text = _
              "SELECT " & _
              "  bill.USR$DEPTKEY AS CONID, " & _
              "  g.ID, " & _
              "  g.ALIAS, " & _
              "  g.NAME, " & _
              "  g.USR$PF_ISWEIGHT, " & _
              "  c.USR$PFD_BARCODE AS BARCODE, " & _
              "  g.USR$PF_ISFRAC, " & _
              "  c.USR$INV_COSTRETAILNCU, " & _
              "  (C.USR$INV_COSTBUYNCU + C.USR$INV_BUYNDSNCU) as Cost, " & _
              "  v.NAME AS ValueName, " & _
              "   c.USR$INV_EXPIRYDATE, c.USR$INV_DATEMAKING, " & _
              "  bline.TOQUANTITY AS QUANTITY " & _
              SelectPart & _
              " FROM USR$INV_INVENT bill " & _
              "  LEFT JOIN GD_DOCUMENT d ON bill.DOCUMENTKEY = d.ID " & _
              "  LEFT JOIN USR$INV_INVENTLINE bline ON bill.DOCUMENTKEY = bline.MASTERKEY " & _
              "  LEFT JOIN INV_CARD c ON c.ID = bline.FROMCARDKEY " & _
              "  LEFT JOIN GD_GOOD g ON g.ID = c.GOODKEY " & _
              "  LEFT JOIN GD_VALUE v ON g.VALUEKEY = v.ID " & _
              FromPart & _
              "WHERE bill.DOCUMENTKEY = :dockey " & _
              sWherePart
              
              sTableName = "USR$INV_INVENTLINE"
          End Select
          
          qIsExp.SQL.Text = _
            "UPDATE " & sTableName & _
            "  SET USR$ISEXPORT = 1 " & _
            "WHERE " & _
            "  (COALESCE(USR$ISSPEND, 0) = 1 AND COALESCE(USR$ISEXPORT,0) = 0) /* QUANTITY = :q */ " & _
            "  AND MASTERKEY= :dockey " & _
            "  /* AND DOCUMENTKEY IN( " & _
            "    SELECT l.DOCUMENTKEY " & _
            "    FROM " & sTableName & " l " & _
            "    LEFT JOIN INV_CARD c ON c.ID = l.FROMCARDKEY " & _
            "    LEFT JOIN GD_GOOD g ON g.ID = c.GOODKEY " & _
            "    WHERE " & _
            "      l.MASTERKEY = :dockey " & _
            "      AND COALESCE(c.USR$INV_COSTRETAILNCU, 0) = :cost " & _
            "      AND c.GOODKEY = :goodkey " & _
            "      AND COALESCE(l.QUANTITY, 0) = :q) */ "
        
          ' создаем Прайс
          Dim qPrice
          Set qPrice = Creator.GetObject(nil, "TIBSQL", "")
          qPrice.Transaction = Transaction
          qPrice.SQL.Text = _
            " INSERT INTO USR$PF_PRICELIST (ID, USR$GOODKEY, USR$CODEDEPOT, " & _
            "   USR$PRICE, USR$PRICEWITHDISC, USR$CODE, USR$ALIAS, USR$QUANTITY, USR$BILLKEY, USR$EXPIRYDATE, USR$DATEMAKING) VALUES (:ID, :GOODKEY, :USR$CODEDEPOT, " & _
            "   :USR$PRICE, :USR$PRICE2, :USR$CODE, :USR$ALIAS, :USR$QUANTITY, :BK, :EXPIRYDATE, :DATEMAKING) "
        
          ' обновляем Прайс
          Dim qUpPrice
          Set qUpPrice = Creator.GetObject(nil, "TIBSQL", "")
          qUpPrice.Transaction = Transaction
          qUpPrice.SQL.Text = _
            " SELECT SUM(USR$QUANTITY) AS USR$QUANTITY  FROM USR$PF_PRICELIST WHERE USR$GOODKEY = :goodkey AND USR$CODEDEPOT = :CD " & _
            "  AND USR$CODE = :BARCODE /*AND USR$PRICE = :PRICE */"
        
        '  Dim qDelete
        '  Set qDelete = Creator.GetObject(nil, "TIBSQL", "")
        '  qDelete.Transaction = Transaction
        '  qDelete.SQL.Text = _
        '    "DELETE FROM USR$PF_PRICELIST WHERE USR$GOODKEY = :goodkey AND USR$CODEDEPOT = :CD AND USR$CODE = :BARCODE "
        
          Dim qFeatures
          Set qFeatures = Creator.GetObject(nil, "TIBSQL", "")
          qFeatures.Transaction = Transaction
          qFeatures.SQL.Text = _
            "INSERT INTO USR$PF_PRICEFEATURES(USR$PRICEINT, USR$NAME, USR$VALUE) VALUES(:P, :N, :V) "
        
          If Not Transaction.InTransaction Then Transaction.StartTransaction
        
          Except pfd_ExportFromDepotInServer_Exc(Transaction)
        
          Dim DepotStr
          sqlGoodBill.Prepare
          If DocType <> 0 Then
            sqlGoodBill.ParamByName("dockey").AsInteger = ID
            If InStr(UCase(sqlGoodBill.Params.Names), "DEPKEY") > 0 Then
              sqlGoodBill.ParamByName("DepKey").AsInteger = DepKey
            End If
          Else
            Dim q, LB, RB
            LB = -2
            RB = -2
            Set q = Creator.GetObject(nil, "TIBSQL", "")
            q.Transaction = gdcBaseManager.ReadTransaction
            q.SQL.Text = _
              "SELECT LB, RB " & _
              "FROM GD_CONTACT " & _
              "WHERE ID = :DepotKey "
            q.ParamByName("DepotKey").AsInteger = DepKey
            q.ExecQuery
            If Not q.EoF Then
              LB = q.FieldByName("LB").AsInteger
              RB = q.FieldByName("RB").AsInteger
            End If
        
            sqlGoodBill.ParamByName("Lb").AsInteger = LB
            sqlGoodBill.ParamByName("Rb").AsInteger = RB
            sqlGoodBill.ParamByName("EndDate").AsDateTime = EndDate
            q.Close
            q.SQL.Text = _
              "SELECT c.ID " & _
              "FROM GD_CONTACT p " & _
              "JOIN GD_CONTACT c ON c.LB >= p.LB AND c.RB <= p.RB AND c.CONTACTTYPE = 4 " & _
              "WHERE p.ID = :DepotKey "
            q.ParamByName("DepotKey").AsInteger = DepKey
            q.ExecQuery
            DepotStr = ""
            While Not q.EoF
              If DepotStr <> "" Then DepotStr = DepotStr & ","
              DepotStr = DepotStr & q.FieldByName("ID").AsInteger
              q.Next
            Wend
            If DepotStr = "" Then DepotStr = "0"
          End If
        
          Dim qDelete
          Set qDelete = Creator.GetObject(nil, "TIBSQL", "")
          qDelete.Transaction = Transaction
          If DocType <> 0 Then
            qDelete.SQL.Text = _
              "DELETE FROM USR$PF_PRICELIST WHERE USR$GOODKEY = :goodkey AND USR$CODEDEPOT = :CD AND COALESCE(USR$CODE, '') = :BARCODE /*AND USR$PRICE = :PRICE  */"
          Else
            qDelete.SQL.Text = _
              "DELETE FROM USR$PF_PRICELIST WHERE USR$CODEDEPOT IN  (" & DepotStr & ")"
           ' qDelete.ExecQuery
            ' if Transaction.InTransaction then Transaction.CommitRetaining
          End If
          
          sqlGoodBill.ExecQuery
        
          If sqlGoodBill.EoF Then
            If Not pf_Silent Then
              Call Application.MessageBox("Остатки не найдены!", "Внимание", vbOkOnly + vbInformation  + vbSystemModal)
            End If
            Exit Function
          End If
        
          ' Генерация ИД на удаленной БД
          Dim qGenID
          Set qGenID = Creator.GetObject(nil, "TIBSQL", "")
          qGenID.Transaction = Transaction
          qGenID.SQL.Text = _
            "SELECT " & _
            "GEN_ID(gd_g_unique, 1) + GEN_ID(gd_g_offset, 0) AS NewID " & _
            "FROM RDB$DATABASE "
        
        
        
          Dim qGetDB
          Set qGetDB = Creator.GetObject(nil, "TIBSQL", "")
          qGetDB.Transaction = Transaction
          qGetDB.SQL.Text = _
            "SELECT gen_id(gd_g_dbid, 0) AS DBID FROM rdb$database"
        
          Dim GoodKey, WasError, gdcGood
          Set gdcGood = Creator.GetObject(nil, "TgdcGood", "")
          gdcGood.SubSet = "OnlySelected"
        
          WasError = false
          Dim NewId, DBID
        
          qGetDB.Close
          qGetDB.ExecQuery
          DBID = qGetDB.FieldByName("DBID").AsInteger
        
          Dim Quant, j
          
          ' если это остатки, нужно полностью очистить прайс по этому подразделению
          If DocType = 0 Then
            qDelete.Close
            qDelete.ExecQuery
            if Transaction.InTransaction then Transaction.CommitRetaining
          End If
          
          Dim PrCount : PrCount = 0
          While Not sqlGoodBill.Eof
            PrCount = PrCount + 1
            sqlGoodBill.Next
          Wend
        
          sqlGoodBill.Close
          sqlGoodBill.ExecQuery
        
          Dim pf_ProgressBar
          Set pf_ProgressBar = New Tvb_pf_ProgressBar
          pf_ProgressBar.Caption = "Экспорт данных"
          pf_ProgressBar.Max = PrCount
          pf_ProgressBar.Show
        
          While Not sqlGoodBill.EoF
            If pf_ServerWithDepot Then
              Goodkey = sqlGoodBill.FieldByName("id").AsInteger
            Else
              GoodKey = pfd_FindOrAddGood(sqlGoodBill.FieldByName("ID").AsInteger, Transaction, false)
            End If
            If GoodKey > 0 Then
              err.Clear
              on error resume next
                Quant = 0
                ' Если не остатки
                If DocType <> 0 or Cstl Then
                  qUpPrice.Close
                  qUpPrice.ParamByName("goodkey").AsInteger = Goodkey
                  qUpPrice.ParamByName("CD").AsInteger = sqlGoodBill.FieldByName("CONID").AsInteger
                  qUpPrice.ParamByName("BARCODE").AsString = sqlGoodBill.FieldByName("BARCODE").AsString
                  'qUpPrice.ParamByName("PRICE").AsCurrency = sqlGoodBill.FieldByName("USR$INV_COSTRETAILNCU").AsCurrency
        '          qUpPrice.ParamByName("EXPIRYDATE").asVariant = sqlGoodBill.FieldByName("USR$INV_EXPIRYDATE").asVariant
        '          qUpPrice.ParamByName("DATEMAKING").asVariant = sqlGoodBill.FieldByName("USR$INV_DATEMAKING").asVariant
                  qUpPrice.ExecQuery
                  Quant = qUpPrice.FieldByName("USR$QUANTITY").AsCurrency
        
        
                  qDelete.Close
                  qDelete.ParamByName("goodkey").AsInteger = Goodkey
                  qDelete.ParamByName("CD").AsInteger = sqlGoodBill.FieldByName("CONID").AsInteger
                  qDelete.ParamByName("BARCODE").AsString = sqlGoodBill.FieldByName("BARCODE").AsString
                  'qDelete.ParamByName("PRICE").AsCurrency = sqlGoodBill.FieldByName("USR$INV_COSTRETAILNCU").AsCurrency
                  qDelete.ExecQuery
                
                End If
        
                qGenID.Close
                qGenID.ExecQuery
                NewId =  qGenID.FieldByName("NewID").AsInteger
                qPrice.Close
                qPrice.ParamByName("ID").AsInteger =  NewId
                qPrice.ParamByName("GOODKEY").AsInteger = _
                  GoodKey
                qPrice.ParamByName("USR$CODEDEPOT").AsInteger = _
                  sqlGoodBill.FieldByName("CONID").AsInteger
        
                qPrice.ParamByName("USR$PRICE").AsCurrency = _
                  sqlGoodBill.FieldByName("USR$INV_COSTRETAILNCU").AsCurrency
        
                qPrice.ParamByName("USR$PRICE2").AsCurrency = _
                  InvOptions.invRound(sqlGoodBill.FieldByName("cost").AsCurrency, Mat_RoundType, 0.01)
        
                qPrice.ParamByName("USR$CODE").AsString = _
                  sqlGoodBill.FieldByName("BARCODE").AsString
                  
                qPrice.ParamByName("USR$ALIAS").AsString = _
                  sqlGoodBill.FieldByName("ALIAS").AsString
        
                qPrice.ParamByName("USR$QUANTITY").AsCurrency = _
                  sqlGoodBill.FieldByName("QUANTITY").AsCurrency + Quant
                  
                If ID > 0 Then
                  qPrice.ParamByName("BK").AsInteger = ID
                Else
                  qPrice.ParamByName("BK").AsVariant = null
                End If
        
                qPrice.ParamByName("EXPIRYDATE").AsVariant = _
                 sqlGoodBill.FieldByName("USR$INV_EXPIRYDATE").AsVariant
        
                qPrice.ParamByName("DATEMAKING").AsVariant = _
                  sqlGoodBill.FieldByName("USR$INV_DATEMAKING").AsVariant
        
                qPrice.ExecQuery
                
        '        If DocType <> 0 Then
        '          If Not isTwoDept Then
        '            qIsExp.Close
        '            qIsExp.ParamByName("dockey").AsInteger = ID
        '            qIsExp.ParamByName("goodkey").AsInteger = _
        '              sqlGoodBill.FieldByName("ID").AsCurrency
        '            qIsExp.ParamByName("cost").AsCurrency = _
        '              sqlGoodBill.FieldByName("USR$INV_COSTRETAILNCU").AsCurrency
        '            qIsExp.ParamByName("q").AsCurrency = _
        '              ABS(sqlGoodBill.FieldByName("QUANTITY").AsCurrency)
        '            qIsExp.ExecQuery
        '          Else
        '
        '          End If
        '        End If
        
                If UBound(FeatureNamesArr) >= 0 Then
                  j = 1
                  While j <= (UBound(FeatureNamesArr) + 1)
                    If Not sqlGoodBill.Fields(10 + j).IsNull Then
                      qFeatures.Close
                      qFeatures.ParamByName("P").AsInteger = NewID
                      qFeatures.ParamByName("N").AsString = FeatureNamesArr(j - 1)
                      qFeatures.ParamByName("V").AsString = Left(sqlGoodBill.Fields(10 + j).AsString, 120)
                      qFeatures.ExecQuery
                    End If
                    j = j + 1
                  Wend
                End If
              on error goto 0
            Else
              WasError = True
              Call gdcGood.AddToSelectedID(sqlGoodBill.FieldByName("ID").AsInteger)
            End If
            
            pf_ProgressBar.Note = _
              "Товар: " & _
              sqlGoodBill.FieldByName("NAME").AsString
            pf_ProgressBar.StepIt
            If pf_ProgressBar.Canceled Then
              Transaction.Rollback
              Exit Function
            End If
            
            If pf_ProgressBar.Position Mod 1000 = 0 Then
              Transaction.CommitRetaining
            End If
            
            sqlGoodBill.Next
          Wend
          
          If Assigned(gdcO) Then
            If Not isTwoDept Then
              qIsExp.ParamByName("dockey").AsInteger = ID
              qIsExp.ExecQuery
              gdcO.Edit
              gdcO.FieldByName("USR$PFD_DELIVERED").AsInteger = 1
              gdcO.Post
              gdcO.Refresh
            End If
          End If
          
            'если ТМЦ нет, его нужно перенести на БД кассового сервера вручную
          If WasError Then
            If Application.MessageBox("Некоторые ТМЦ не найдены на базе кассового сервера. " & VBCr & _
                "Их необходимо перенести вручную! Сформировать файл данных?", _
                 "Внимание", mb_YesNo or vbSystemModal or mb_IconError) = vbYes Then
              gdcGood.Open
              Dim gdcSetting, gdcSettingPos
              Set gdcSetting = Creator.GetObject(nil, "TgdcSetting", "")
              Set gdcSettingPos = Creator.GetObject(nil, "TgdcSettingPos", "")
              Dim dsMaster
              Set dsMaster = Creator.GetObject(nil, "TDataSource", "")
              dsMaster.DataSet = gdcSetting
        
              gdcSettingPos.MasterSource = dsMaster
              gdcSettingPos.MasterField = "ID"
              gdcSettingPos.DetailField = "SETTINGKEY"
              gdcSettingPos.SubSet = "BySetting"
        
              gdcSetting.Open
              gdcSettingPos.Open
              gdcSetting.Insert
              gdcSetting.FieldByName("NAME").AsString = _
                CStr(Year(Now)) & "_" & Right("0" & CStr(Month(Now)), 2)& "_" & Right("0" & CStr(Day(Now)), 2)
              gdcSetting.FieldByName("MODIFYDATE").AsDateTime = Now
              gdcSetting.Post
        
              While Not gdcGood.EoF
                Call gdcSettingPos.AddPos(gdcGood, false)
                gdcGood.Next
              Wend
              If gdcSettingPos.RecordCount > 0 Then
                on error resume next
                  Call gdcSetting.SaveSettingToBlob
                on error goto 0
                Call gdcSetting.SaveToFile("")
              Else
                gdcSetting.Delete
              End If
            End If
            Transaction.RollBack
          End If
          gdcGood.Close
          
          If OurTransaction.InTransaction Then OurTransaction.Commit
        
          If  Transaction.InTransaction Then
            Transaction.Commit
            If Not pf_Silent Then
              If Not isTwoDept Then
                Call Application.MessageBox("Экспорт товара завершен!", _
                   "Внимание", mb_Ok or vbSystemModal or mb_IconInformation)
              End If
            End If
          End If
        
        End Function
        
        Sub pfd_ExportFromDepotInServer_Exc(Transaction)
          If Transaction.InTransaction Then Transaction.Rollback
        End Sub
        
        Function  pfd_ExportFromDepotInServer_GetClauses(Creator, NeedGroupPart)
          Dim q
          Set q = Creator.GetObject(nil, "TIBSQL", "")
          q.Transaction = gdcBaseManager.ReadTransaction
          q.SQL.Text = _
            "SELECT " & _
            "  cl.USR$NAME AS FeatureName, " & _
            "  rf.RELATIONNAME, " & _
            "  rf.FIELDNAME, " & _
            "  d.REFKEYFIELD, " & _
            "  d.REFLISTFIELD, " & _
            "  d.REFRELATION, " & _
            "  CASE rf.RELATIONNAME " & _
            "    WHEN 'GD_GOOD' THEN 'g' " & _
            "    WHEN 'INV_CARD' THEN 'c' " & _
            "    ELSE '' " & _
            "  END AS CondAlias " & _
            "FROM USR$PFD_CODESETTINGS cl " & _
            "LEFT JOIN AT_RELATION_FIELDS rf ON rf.ID  =  cl.USR$FIELDKEY " & _
            "LEFT JOIN USR$PFD_P_GET_REF_PARAMS(rf.FIELDSOURCEKEY, rf.FIELDNAME, rf.RELATIONNAME) d ON 1 = 1 " & _
            "LEFT JOIN RDB$RELATION_FIELDS rdb_f ON rdb_f.RDB$FIELD_NAME = IIF(d.REFLISTFIELD IS NULL, rf.FIELDNAME, d.REFLISTFIELD) " & _
            "                                   AND rdb_f.RDB$RELATION_NAME = IIF(d.REFRELATION IS NULL, rf.RELATIONNAME, d.REFRELATION) "
          q.ExecQuery
          
          Dim TabAlias, SelectPart, FromPart, GroupPart, i, RefFieldName,  FeatureNames
          SelectPart = ""
          FromPart = ""
          GroupPart = ""
          FeatureNames = ""
          i = 1
          While Not q.EoF
            If SelectPart <> "" Then
              SelectPart = SelectPart &  VBCR
            End If
            
            TabAlias = Trim(q.FieldByName("CondAlias").AsString)
            
            If Not q.FieldByName("REFRELATION").IsNull Then
              FromPart = FromPart & VBCr & _
                  "LEFT JOIN " & Trim(q.FieldByName("REFRELATION").AsString) & " ref"   & i & " ON ref"   & i & "." & Trim(q.FieldByName("REFKEYFIELD").AsString) & " = " & TabAlias & "." &  Trim(q.FieldByName("FIELDNAME").AsString) & " "
              RefFieldName = " ref" & i & "." & Trim(q.FieldByName("REFLISTFIELD").AsString )
            Else
              RefFieldName = TabAlias & "." & Trim(q.FieldByName("FIELDNAME").AsString)
            End If
            
            SelectPart = SelectPart & ", " & RefFieldName & " AS Group" & i
            If NeedGroupPart Then
              GroupPart = GroupPart &  "," &  RefFieldName & " "
            End If
            If FeatureNames <> "" Then FeatureNames = FeatureNames & ";"
            FeatureNames = FeatureNames & Trim(q.FieldByName("FeatureName").AsString)
            i = i + 1
            q.Next
          Wend
          pfd_ExportFromDepotInServer_GetClauses = Array(SelectPart, FromPart, GroupPart, FeatureNames)
        End Function
        
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147034572_918566284 pfd_FindOrAddGood"
          - 
            ADDFUNCTIONKEY: "147034573_918566284 pfd_FindGoodWithoutAdding"
          - 
            ADDFUNCTIONKEY: "147032951_917536542 pfd_SyncDepot"